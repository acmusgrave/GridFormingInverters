!=======================================================================
! Generated by: PSCAD v5.0.2.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Control_12_2_1_1_1_1
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE Control_12_2_1_1_1_1Dyn(Iabc, Vabc, I_ref_dq, freq,    &
     &   phi, Qref, Vref, Pref, Vpeak, Ibase, Imax, Pmax, Pmin, Qmax,   &
     &   Qmin, Kp_lim, Ti_lim, w_base, w_type, Kppll, Kipll_T, Kpp,     &
     &   Kip_T, Kdrp, Kpv, Kiv_T, Kpvq, Kivq, Kpq, Kiq_T, DVS_dbd,      &
     &   DVS_gain, v_drp, Kp_rocof, Ti_rocof, Qflag, Vflag, PQflag,     &
     &   Vdip, Vup, T_frz, K_pod, Tw_pod, T1_pod, T2_pod, vd_Kp,        &
     &   vd_Ki_T, d_vsm, m_vsm, Cfilter_pu, Dblk)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
!     SUBR    EMTDC_XTTRANS  ! 'Timed Transition'
!     SUBR    EMTDC_XMSTAB  ! 'Monostable Multivibrator /w Interpolation'
!     SUBR    TRDQO         ! DQ0 transformation
!     SUBR    FILN15        ! Nth-order Butterworth/Chebyshev Filter
!     SUBR    EPRI_PLL_22_2_1_1_1_1Dyn  ! 
      REAL    DIFFPOLE      ! Differential Pole Function
      REAL    LDLGPOLE      ! Lead-Lag Function
      REAL    EMTDC_XINT    ! 'Integrator /w Interpolation'
      REAL    LIMIT         ! Hard Limiter

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Iabc(3), Vabc(3)
      REAL,    INTENT(IN)  :: Qref, Vref, Pref
      REAL,    INTENT(IN)  :: Vpeak, Ibase, Imax
      REAL,    INTENT(IN)  :: Pmax, Pmin, Qmax
      REAL,    INTENT(IN)  :: Qmin, Kp_lim
      REAL,    INTENT(IN)  :: Ti_lim, w_base
      REAL,    INTENT(IN)  :: w_type, Kppll
      REAL,    INTENT(IN)  :: Kipll_T, Kpp, Kip_T
      REAL,    INTENT(IN)  :: Kdrp, Kpv, Kiv_T
      REAL,    INTENT(IN)  :: Kpvq, Kivq, Kpq
      REAL,    INTENT(IN)  :: Kiq_T, DVS_dbd
      REAL,    INTENT(IN)  :: DVS_gain, v_drp
      REAL,    INTENT(IN)  :: Kp_rocof, Ti_rocof
      REAL,    INTENT(IN)  :: Qflag, Vflag
      REAL,    INTENT(IN)  :: PQflag, Vdip, Vup
      REAL,    INTENT(IN)  :: T_frz, K_pod
      REAL,    INTENT(IN)  :: Tw_pod, T1_pod
      REAL,    INTENT(IN)  :: T2_pod, vd_Kp
      REAL,    INTENT(IN)  :: vd_Ki_T, d_vsm
      REAL,    INTENT(IN)  :: m_vsm, Cfilter_pu
      REAL,    INTENT(IN)  :: Dblk
      REAL,    INTENT(OUT) :: I_ref_dq(2), freq
      REAL,    INTENT(OUT) :: phi

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, P_Q_Dblk, P_Q_RST, Vfrz
      REAL     phis, RT_1(4), RT_2(2), Ipvabc(3)
      REAL     RT_3, RT_4, RT_5, RT_6, RT_7, RT_8
      REAL     RT_9, RT_10, Vpvabc(3), RT_11
      REAL     RT_12, RT_13, RT_14, RT_15, RT_16
      REAL     RT_17, RT_18, RT_19, RT_20, RT_21
      REAL     RT_22, RT_23, RT_24, Ipvd, Ipvq
      REAL     RT_25, Id_init, RT_26, RT_27
      REAL     RT_28, RT_29, RT_30, RT_31, RT_32
      REAL     RT_33, RT_34, RT_35, RT_36, RT_37
      REAL     RT_38, RT_39, RT_40, RT_41, RT_42
      REAL     RT_43, RT_44, Verr, RT_45, RT_46
      REAL     RT_47, RT_48, RT_49, RT_50, RT_51
      REAL     RT_52, RT_53, RT_54, Iq_init
      REAL     Q_pi_init, RT_55, RT_56, RT_57
      REAL     RT_58, RT_59, RT_60, RT_61, RT_62
      REAL     RT_63, RT_64, RT_65, RT_66, RT_67
      REAL     RT_68, Pelec, RT_69, Qelec, Eref
      REAL     RT_70(2), RT_71, RT_72, RT_73
      REAL     RT_74, RT_75, RT_76, RT_77, RT_78
      REAL     RT_79, RT_80, Vpvq, RT_81, RT_82
      REAL     Freq_pll_pu, RT_83, RT_84, IqMin
      REAL     IqMax, RT_85, RT_86, IdMax, IdMin
      REAL     RT_87, RT_88, RT_89, RT_90, RT_91
      REAL     Ipvd_ref, Ipvq_ref, RT_92, Vpvd
      REAL     RT_93, Pref_lim, Qref_lim

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1
      REAL     RVD2_1(2), RVD2_2(2), RVD1_1
      REAL     RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 4
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 181
      IPGB      = NPGB
      NPGB      = NPGB + 3
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      freq     = STOF(ISTOF + 9)
      phi      = STOF(ISTOF + 10)
      phis     = STOF(ISTOF + 57)
      IT_1     = STOI(ISTOI + 1)
      RT_3     = STOF(ISTOF + 67)
      RT_4     = STOF(ISTOF + 68)
      RT_5     = STOF(ISTOF + 69)
      RT_6     = STOF(ISTOF + 70)
      RT_7     = STOF(ISTOF + 71)
      RT_8     = STOF(ISTOF + 72)
      RT_9     = STOF(ISTOF + 73)
      RT_10    = STOF(ISTOF + 74)
      RT_11    = STOF(ISTOF + 78)
      RT_12    = STOF(ISTOF + 79)
      RT_13    = STOF(ISTOF + 80)
      RT_14    = STOF(ISTOF + 81)
      RT_15    = STOF(ISTOF + 82)
      RT_16    = STOF(ISTOF + 83)
      RT_17    = STOF(ISTOF + 84)
      RT_18    = STOF(ISTOF + 85)
      RT_19    = STOF(ISTOF + 86)
      RT_20    = STOF(ISTOF + 87)
      RT_21    = STOF(ISTOF + 88)
      RT_22    = STOF(ISTOF + 89)
      RT_23    = STOF(ISTOF + 90)
      RT_24    = STOF(ISTOF + 91)
      Ipvd     = STOF(ISTOF + 92)
      Ipvq     = STOF(ISTOF + 93)
      P_Q_Dblk = STOI(ISTOI + 2)
      RT_25    = STOF(ISTOF + 94)
      Id_init  = STOF(ISTOF + 95)
      RT_26    = STOF(ISTOF + 96)
      RT_27    = STOF(ISTOF + 97)
      RT_28    = STOF(ISTOF + 98)
      RT_29    = STOF(ISTOF + 99)
      RT_30    = STOF(ISTOF + 100)
      RT_31    = STOF(ISTOF + 101)
      RT_32    = STOF(ISTOF + 102)
      RT_33    = STOF(ISTOF + 103)
      RT_34    = STOF(ISTOF + 104)
      P_Q_RST  = STOI(ISTOI + 3)
      RT_35    = STOF(ISTOF + 105)
      RT_36    = STOF(ISTOF + 106)
      RT_37    = STOF(ISTOF + 107)
      RT_38    = STOF(ISTOF + 108)
      RT_39    = STOF(ISTOF + 109)
      RT_40    = STOF(ISTOF + 110)
      RT_41    = STOF(ISTOF + 111)
      RT_42    = STOF(ISTOF + 112)
      RT_43    = STOF(ISTOF + 113)
      RT_44    = STOF(ISTOF + 114)
      Verr     = STOF(ISTOF + 115)
      RT_45    = STOF(ISTOF + 116)
      RT_46    = STOF(ISTOF + 117)
      RT_47    = STOF(ISTOF + 118)
      RT_48    = STOF(ISTOF + 119)
      RT_49    = STOF(ISTOF + 120)
      RT_50    = STOF(ISTOF + 121)
      RT_51    = STOF(ISTOF + 122)
      RT_52    = STOF(ISTOF + 123)
      RT_53    = STOF(ISTOF + 124)
      RT_54    = STOF(ISTOF + 125)
      Iq_init  = STOF(ISTOF + 126)
      Q_pi_init = STOF(ISTOF + 127)
      RT_55    = STOF(ISTOF + 128)
      RT_56    = STOF(ISTOF + 129)
      RT_57    = STOF(ISTOF + 130)
      RT_58    = STOF(ISTOF + 131)
      RT_59    = STOF(ISTOF + 132)
      RT_60    = STOF(ISTOF + 133)
      RT_61    = STOF(ISTOF + 134)
      RT_62    = STOF(ISTOF + 135)
      RT_63    = STOF(ISTOF + 136)
      RT_64    = STOF(ISTOF + 137)
      RT_65    = STOF(ISTOF + 138)
      RT_66    = STOF(ISTOF + 139)
      RT_67    = STOF(ISTOF + 140)
      RT_68    = STOF(ISTOF + 141)
      Vfrz     = STOI(ISTOI + 4)
      Pelec    = STOF(ISTOF + 142)
      RT_69    = STOF(ISTOF + 143)
      Qelec    = STOF(ISTOF + 144)
      Eref     = STOF(ISTOF + 145)
      RT_71    = STOF(ISTOF + 148)
      RT_72    = STOF(ISTOF + 149)
      RT_73    = STOF(ISTOF + 150)
      RT_74    = STOF(ISTOF + 151)
      RT_75    = STOF(ISTOF + 152)
      RT_76    = STOF(ISTOF + 153)
      RT_77    = STOF(ISTOF + 154)
      RT_78    = STOF(ISTOF + 155)
      RT_79    = STOF(ISTOF + 156)
      RT_80    = STOF(ISTOF + 157)
      Vpvq     = STOF(ISTOF + 158)
      RT_81    = STOF(ISTOF + 159)
      RT_82    = STOF(ISTOF + 160)
      Freq_pll_pu = STOF(ISTOF + 161)
      RT_83    = STOF(ISTOF + 162)
      RT_84    = STOF(ISTOF + 163)
      IqMin    = STOF(ISTOF + 164)
      IqMax    = STOF(ISTOF + 165)
      RT_85    = STOF(ISTOF + 166)
      RT_86    = STOF(ISTOF + 167)
      IdMax    = STOF(ISTOF + 168)
      IdMin    = STOF(ISTOF + 169)
      RT_87    = STOF(ISTOF + 170)
      RT_88    = STOF(ISTOF + 171)
      RT_89    = STOF(ISTOF + 172)
      RT_90    = STOF(ISTOF + 173)
      RT_91    = STOF(ISTOF + 174)
      Ipvd_ref = STOF(ISTOF + 175)
      Ipvq_ref = STOF(ISTOF + 176)
      RT_92    = STOF(ISTOF + 177)
      Vpvd     = STOF(ISTOF + 178)
      RT_93    = STOF(ISTOF + 179)
      Pref_lim = STOF(ISTOF + 180)
      Qref_lim = STOF(ISTOF + 181)

! Array (1:2) quantities...
      DO IT_0 = 1,2
         I_ref_dq(IT_0) = STOF(ISTOF + 6 + IT_0)
         RT_2(IT_0) = STOF(ISTOF + 61 + IT_0)
         RT_70(IT_0) = STOF(ISTOF + 145 + IT_0)
      END DO

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Ipvabc(IT_0) = STOF(ISTOF + 63 + IT_0)
         Vpvabc(IT_0) = STOF(ISTOF + 74 + IT_0)
      END DO

! Array (1:4) quantities...
      DO IT_0 = 1,4
         RT_1(IT_0) = STOF(ISTOF + 57 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Control_12_2_1_1_1_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 60:[time-sig] Output of Simulation Time 
      RT_17 = TIME

! 180:[const] Real Constant 'sqrt(2)'
      RT_4 = 1.414213

! 520:[const] Real Constant 'Fref'
      RT_45 = 1.0

! 530:[emtconst] Commonly Used Constants (pi...) 
      RT_76 = TWO_PI

! 540:[div_171_1_2_1_1_1_1] Divider 
!
      IF (ABS(Vref) .LT. 1.0E-10) THEN
         IF (Vref .LT. 0.0)  THEN
            Id_init = -1.0E10 * Pref
         ELSE
            Id_init =  1.0E10 * Pref
         ENDIF
      ELSE
         Id_init = Pref / Vref
      ENDIF
!

! 550:[div_171_1_2_1_1_1_1] Divider 
!
      IF (ABS(Vref) .LT. 1.0E-10) THEN
         IF (Vref .LT. 0.0)  THEN
            Iq_init = -1.0E10 * Qref
         ELSE
            Iq_init =  1.0E10 * Qref
         ENDIF
      ELSE
         Iq_init = Qref / Vref
      ENDIF
!

! 560:[gain] Gain Block 
!  Gain
      RT_28 = -1.0 * Iq_init

! 570:[square] Square 
      RT_89 = Imax * Imax

! 580:[const] Real Constant 'Vqref'
      RT_68 = 0.0

! 590:[select] Two Input Selector 
      IF (NINT(Qflag) .EQ. RTCI(NRTCI)) THEN
         Q_pi_init = Iq_init
      ELSE
         Q_pi_init = Vref
      ENDIF
      NRTCI = NRTCI + 1
!

! 600:[const] Real Constant 
      RT_92 = 1.0

! 610:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,Dblk,RT_17,0.0,0.0,1.0,RVD2_1)
      RT_18 = RVD2_1(1)

! 620:[div_172_1_2_1_1_1_1] Divider 
!
      IF (ABS(Vpeak) .LT. 1.0E-10) THEN
         IF (Vpeak .LT. 0.0)  THEN
            Vpvabc = -1.0E10 * Vabc
         ELSE
            Vpvabc =  1.0E10 * Vabc
         ENDIF
      ELSE
         Vpvabc = Vabc / Vpeak
      ENDIF
!

! 630:[datatap] Scalar/Array Tap 
      RT_11 = Vpvabc(1)

! 640:[bin_delay] Timed ON/OFF Logic Transition 
!
      RVD2_1(1) = REAL(NINT(RT_18))
      RVD2_1(2) = 0.0
!
      CALL EMTDC_XTTRANS(0,0.1,0.0,RVD2_1,RVD2_2)
!
      P_Q_Dblk = NINT(RVD2_2(1))

! 650:[mult] Multiplier 
      RT_3 = Ibase * RT_4

! 660:[datatap] Scalar/Array Tap 
      RT_12 = Vpvabc(2)

! 670:[monostable] Interpolated Monostable MultiVibrator 
!
      RVD2_1(1) = FLOAT(NINT(RT_18))
      RVD2_1(2) = 0.0
      CALL EMTDC_XMSTAB(0,0.05,RVD2_1,RVD2_2)
      P_Q_RST = NINT(RVD2_2(1))


! 680:[datatap] Scalar/Array Tap 
      RT_13 = Vpvabc(3)

! 690:[div_172_1_2_1_1_1_1] Divider 
!
      IF (ABS(RT_3) .LT. 1.0E-10) THEN
         IF (RT_3 .LT. 0.0)  THEN
            Ipvabc = -1.0E10 * Iabc
         ELSE
            Ipvabc =  1.0E10 * Iabc
         ENDIF
      ELSE
         Ipvabc = Iabc / RT_3
      ENDIF
!

! 700:[datatap] Scalar/Array Tap 
      RT_5 = Ipvabc(1)

! 710:[datatap] Scalar/Array Tap 
      RT_6 = Ipvabc(2)

! 720:[datatap] Scalar/Array Tap 
      RT_7 = Ipvabc(3)

! 730:[abcdq61_2_1_1_1_1] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(RT_5,RT_6,RT_7,RT_8,RT_9,RT_10,phis,1)
      RT_9 = -RT_9

! 740:[trans_filt] Nth Order Butterworth/Chebyshev Filter 
!
!  BUTTERWORTH FILTER
!
      CALL COMPONENT_ID(ICALL_NO,1234689792)
      CALL FILN15(3,120.0,0.0, 0.0 ,1,1,0,RT_9,Ipvq)
!

! 750:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Vpvd,Vup,1.0,0.0,0.0,RVD2_1)
      RT_55 = RVD2_1(1)

! 760:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Vpvd,Vdip,0.0,0.0,1.0,RVD2_1)
      RT_56 = RVD2_1(1)

! 770:[logic_mult] Multiple Input Logic Gate 
!
! Multi input OR gate
!
      IF ( (NINT(RT_56) .NE. 0) .OR. (NINT(RT_55) .NE. 0) ) THEN
        Vfrz = 0
      ELSE
        Vfrz = 1
      ENDIF

! 780:[inv] Interpolated Logic Inverter 
      IF (Vfrz .NE. 0) THEN
         IT_1 = 0
      ELSE
         IT_1 = 1
      ENDIF

! 790:[mult] Multiplier 
      RT_23 = Vpvd * Ipvq

! 800:[mult] Multiplier 
      RT_21 = Vpvd * Ipvd

! 810:[mult] Multiplier 
      RT_24 = Vpvq * Ipvd

! 820:[sumjct] Summing/Differencing Junctions 
      Qelec = - RT_23 + RT_24

! 830:[abcdq60_2_1_1_1_1] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(RT_11,RT_12,RT_13,RT_14,RT_15,RT_16,phis,1)
      RT_15 = -RT_15

! 840:[trans_filt] Nth Order Butterworth/Chebyshev Filter 
!
!  BUTTERWORTH FILTER
!
      CALL COMPONENT_ID(ICALL_NO,1530863834)
      CALL FILN15(3,120.0,0.0, 0.0 ,1,1,0,RT_15,Vpvq)
!

! 850:[mult] Multiplier 
      RT_22 = Vpvq * Ipvq

! 860:[sumjct] Summing/Differencing Junctions 
      Pelec = + RT_21 + RT_22

! 870:[datamerge] Merges data signals into an array 
      RT_1(1) = Pref
      RT_1(2) = Qref
      RT_1(3) = Pelec
      RT_1(4) = Qelec

! 880:[EPRI_PLL_22_2_1_1_1_1]  
      CALL EPRI_PLL_22_2_1_1_1_1Dyn(Freq_pll_pu, phis, Vpvabc, REAL(IT_1&
     &), RT_1, Eref, Vref, RT_2, w_type, Dblk, 75.0, Kppll, Kipll_T, w_b&
     &ase, Kdrp, Kp_rocof, Ti_rocof, v_drp, d_vsm, m_vsm, T_frz, Pmax, P&
     &min, Qmax, Qmin, Kp_lim, Ti_lim)


! 890:[trans_filt] Nth Order Butterworth/Chebyshev Filter 
!
!  BUTTERWORTH FILTER
!
      CALL COMPONENT_ID(ICALL_NO,279256095)
      CALL FILN15(3,120.0,0.0, 0.0 ,1,1,0,RT_14,Vpvd)
!

! 900:[trans_filt] Nth Order Butterworth/Chebyshev Filter 
!
!  BUTTERWORTH FILTER
!
      CALL COMPONENT_ID(ICALL_NO,1094868151)
      CALL FILN15(3,120.0,0.0, 0.0 ,1,1,0,RT_8,Ipvd)
!

! 910:[square] Square 
      RT_72 = Vpvd * Vpvd

! 920:[datatap] Scalar/Array Tap 
      Qref_lim = RT_2(2)

! 930:[sumjct] Summing/Differencing Junctions 
      RT_47 = - Qelec + Qref

! 940:[square] Square 
      RT_73 = Vpvq * Vpvq

! 950:[sumjct] Summing/Differencing Junctions 
      RT_74 = + RT_72 + RT_73

! 960:[sumjct] Summing/Differencing Junctions 
      RT_69 = - Qelec + Qref_lim

! 970:[diffpole] Differential Pole 
!  Differential_Pole
      RT_71 = DIFFPOLE(0,1,0,K_pod,Tw_pod,Freq_pll_pu,0.0,-1.0E20,1.0E20&
     &)

! 980:[sumjct] Summing/Differencing Junctions 
      RT_46 = - Freq_pll_pu + RT_45

! 990:[sumjct] Summing/Differencing Junctions 
      RT_93 = + RT_92 - Vpvd

! 1000:[gain] Gain Block 
!  Gain
      RT_52 = REAL(Vfrz) * RT_47

! 1010:[gain] Gain Block 
!  Gain
      RT_48 = Kpq * RT_47

! 1020:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_74 .LT. 0.0) THEN
        RT_43 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,465271074,1,2,"A negative value is&
     & detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,465271074,1,-1,"Input is treated a&
     &s 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_43 = SQRT(RT_74)
      ENDIF
      NSTORL = NSTORL + 1

! 1030:[div_171_1_2_1_1_1_1] Divider 
!
      IF (ABS(v_drp) .LT. 1.0E-10) THEN
         IF (v_drp .LT. 0.0)  THEN
            RT_42 = -1.0E10 * RT_69
         ELSE
            RT_42 =  1.0E10 * RT_69
         ENDIF
      ELSE
         RT_42 = RT_69 / v_drp
      ENDIF
!

! 1040:[leadlag] Lead-Lag 
!  Lead_Lag
      RT_41 = LDLGPOLE(0,1,0,T1_pod,T2_pod,1.0,RT_71,0.0,-1.0E20,1.0E20)

! 1050:[gain] Gain Block 
!  Gain
      RT_35 = Kdrp * RT_46

! 1060:[datatap] Scalar/Array Tap 
      Pref_lim = RT_2(1)

! 1070:[sumjct] Summing/Differencing Junctions 
      RT_61 = - Vpvd + Eref

! 1080:[deadband_28_1_1_1] Deadband with offset and gain 
      RT_50 = 0.0
      IF (RT_93 .GT. RTCF(NRTCF)) THEN
        RT_50 = RTCF(NRTCF+1)*(RT_93 - RTCF(NRTCF)) +  RTCF(NRTCF+2)
      ELSEIF (RT_93 .LT. -RTCF(NRTCF)) THEN
        RT_50 = RTCF(NRTCF+1)*(RT_93 + RTCF(NRTCF)) -  RTCF(NRTCF+2)
      ENDIF
      NRTCF = NRTCF + 3

! 1090:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_52
      RVD2_1(2) = 0.0
      RVD2_2(1) = FLOAT(P_Q_RST)
      RVD2_2(2) = 0.0
      RT_49 = EMTDC_XINT(0, 0, 1, RVD1_1, Kiq_T, Q_pi_init, -10.0, 10.0,&
     & RVD2_2, RVD2_1)

! 1100:[sumjct] Summing/Differencing Junctions 
      RT_51 = + RT_48 + RT_49 + RT_50

! 1110:[select] Two Input Selector 
      IF (NINT(Vflag) .EQ. RTCI(NRTCI)) THEN
         RT_44 = Vref
      ELSE
         RT_44 = RT_51
      ENDIF
      NRTCI = NRTCI + 1
!

! 1120:[sumjct] Summing/Differencing Junctions 
      Verr = + RT_41 + RT_42 - RT_43 + RT_44

! 1130:[gain] Gain Block 
!  Gain
      RT_78 = Kpvq * Vpvq

! 1140:[sumjct] Summing/Differencing Junctions 
      RT_33 = + RT_35 + Pref_lim - Pelec

! 1150:[gain] Gain Block 
!  Gain
      RT_58 = REAL(Vfrz) * RT_61

! 1160:[gain] Gain Block 
!  Gain
      RT_60 = vd_Kp * RT_61

! 1170:[sumjct] Summing/Differencing Junctions 
      RT_39 = + RT_78 + Verr

! 1180:[gain] Gain Block 
!  Gain
      RT_34 = REAL(Vfrz) * RT_33

! 1190:[gain] Gain Block 
!  Gain
      RT_30 = Kpp * RT_33

! 1200:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_58
      RVD2_1(2) = 0.0
      RVD2_2(1) = FLOAT(P_Q_RST)
      RVD2_2(2) = 0.0
      RT_59 = EMTDC_XINT(0, 0, 1, RVD1_1, vd_Ki_T, Id_init, -10.0, 10.0,&
     & RVD2_2, RVD2_1)

! 1210:[sumjct] Summing/Differencing Junctions 
      RT_62 = + RT_60 + RT_59

! 1220:[gain] Gain Block 
!  Gain
      RT_77 = Kivq * Vpvq

! 1230:[sumjct] Summing/Differencing Junctions 
      RT_57 = + Verr + RT_77

! 1240:[gain] Gain Block 
!  Gain
      RT_36 = REAL(Vfrz) * RT_57

! 1250:[gain] Gain Block 
!  Gain
      RT_38 = Kpv * RT_39

! 1260:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_34
      RVD2_1(2) = 0.0
      RVD2_2(1) = FLOAT(P_Q_RST)
      RVD2_2(2) = 0.0
      RT_31 = EMTDC_XINT(0, 0, 1, RVD1_1, Kip_T, Id_init, -10.0, 10.0, R&
     &VD2_2, RVD2_1)

! 1270:[sumjct] Summing/Differencing Junctions 
      RT_32 = + RT_30 + RT_31

! 1280:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         RT_25 = RT_32
      ELSE
         RT_25 = RT_62
      ENDIF
      NRTCI = NRTCI + 1
!

! 1290:[mult] Multiplier 
      RT_79 = Cfilter_pu * Freq_pll_pu

! 1300:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_36
      RVD2_1(2) = 0.0
      RVD2_2(1) = FLOAT(P_Q_RST)
      RVD2_2(2) = 0.0
      RT_37 = EMTDC_XINT(0, 0, 1, RVD1_1, Kiv_T, Iq_init, -10.0, 10.0, R&
     &VD2_2, RVD2_1)

! 1310:[sumjct] Summing/Differencing Junctions 
      RT_40 = + RT_38 + RT_37

! 1320:[select] Two Input Selector 
      IF (P_Q_Dblk .EQ. RTCI(NRTCI)) THEN
         RT_26 = RT_25
      ELSE
         RT_26 = Id_init
      ENDIF
      NRTCI = NRTCI + 1
!

! 1330:[mult] Multiplier 
      RT_80 = RT_79 * Vpvq

! 1340:[sumjct] Summing/Differencing Junctions 
      RT_66 = - Vpvq + RT_68

! 1350:[select] Two Input Selector 
      IF (NINT(Qflag) .EQ. RTCI(NRTCI)) THEN
         RT_53 = RT_40
      ELSE
         RT_53 = RT_51
      ENDIF
      NRTCI = NRTCI + 1
!

! 1360:[sumjct] Summing/Differencing Junctions 
      RT_81 = - RT_80 + RT_26

! 1370:[gain] Gain Block 
!  Gain
      RT_63 = REAL(Vfrz) * RT_66

! 1380:[gain] Gain Block 
!  Gain
      RT_65 = vd_Kp * RT_66

! 1390:[gain] Gain Block 
!  Gain
      RT_54 = -1.0 * RT_53

! 1400:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (IdMin .LE. IdMax) THEN
        Ipvd_ref = LIMIT(IdMin, IdMax, RT_81)
      ELSE
        Ipvd_ref = RT_81
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1158586526,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1410:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_63
      RVD2_1(2) = 0.0
      RVD2_2(1) = FLOAT(P_Q_RST)
      RVD2_2(2) = 0.0
      RT_64 = EMTDC_XINT(0, 0, 1, RVD1_1, vd_Ki_T, Iq_init, -10.0, 10.0,&
     & RVD2_2, RVD2_1)

! 1420:[mult] Multiplier 
      RT_82 = Cfilter_pu * Freq_pll_pu

! 1430:[sumjct] Summing/Differencing Junctions 
      RT_67 = + RT_65 + RT_64

! 1440:[square] Square 
      RT_87 = Ipvd_ref * Ipvd_ref

! 1450:[sumjct] Summing/Differencing Junctions 
      RT_88 = - RT_87 + RT_89

! 1460:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         RT_27 = RT_54
      ELSE
         RT_27 = RT_67
      ENDIF
      NRTCI = NRTCI + 1
!

! 1470:[select] Two Input Selector 
      IF (P_Q_Dblk .EQ. RTCI(NRTCI)) THEN
         RT_29 = RT_27
      ELSE
         RT_29 = RT_28
      ENDIF
      NRTCI = NRTCI + 1
!

! 1480:[mult] Multiplier 
      RT_83 = RT_82 * Vpvd

! 1490:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_88 .LT. 0.0) THEN
        RT_85 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,378656832,1,2,"A negative value is&
     & detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,378656832,1,-1,"Input is treated a&
     &s 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_85 = SQRT(RT_88)
      ENDIF
      NSTORL = NSTORL + 1

! 1500:[sumjct] Summing/Differencing Junctions 
      RT_84 = + RT_29 + RT_83

! 1510:[select] Two Input Selector 
      IF (NINT(PQflag) .EQ. RTCI(NRTCI)) THEN
         IqMax = Imax
      ELSE
         IqMax = RT_85
      ENDIF
      NRTCI = NRTCI + 1
!

! 1520:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (IqMin .LE. IqMax) THEN
        Ipvq_ref = LIMIT(IqMin, IqMax, RT_84)
      ELSE
        Ipvq_ref = RT_84
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1866148574,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1530:[square] Square 
      RT_90 = Ipvq_ref * Ipvq_ref

! 1540:[sumjct] Summing/Differencing Junctions 
      RT_91 = - RT_90 + RT_89

! 1550:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_91 .LT. 0.0) THEN
        RT_86 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,832179792,1,2,"A negative value is&
     & detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,832179792,1,-1,"Input is treated a&
     &s 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_86 = SQRT(RT_91)
      ENDIF
      NSTORL = NSTORL + 1

! 1560:[select] Two Input Selector 
      IF (NINT(PQflag) .EQ. RTCI(NRTCI)) THEN
         IdMax = Imax
      ELSE
         IdMax = RT_86
      ENDIF
      NRTCI = NRTCI + 1
!

! 1570:[gain] Gain Block 
!  L
      IqMin = -1.0 * IqMax

! 1580:[gain] Gain Block 
!  L
      IdMin = -1.0 * IdMax

! 1590:[gain_50_2_1_1_1_1] Gain Block 
!  Gain
      RT_75 = w_base * Freq_pll_pu

! 1600:[gain] Gain Block 
!  Gain
      RT_20 = 1.0 * Ipvq_ref

! 1610:[gain] Gain Block 
!  Gain
      RT_19 = 1.0 * Ipvd_ref

! 1620:[div_171_1_2_1_1_1_1] Divider 
!
      IF (ABS(RT_76) .LT. 1.0E-10) THEN
         IF (RT_76 .LT. 0.0)  THEN
            freq = -1.0E10 * RT_75
         ELSE
            freq =  1.0E10 * RT_75
         ENDIF
      ELSE
         freq = RT_75 / RT_76
      ENDIF
!

! 1630:[gain_50_2_1_1_1_1] Gain Block 
!  Gain
      phi = 1.0 * phis

! 1640:[datamerge] Merges data signals into an array 
      I_ref_dq(1) = RT_19
      I_ref_dq(2) = RT_20

! 1660:[pgb] Output Channel 'q-voltage'

      PGB(IPGB+1) = Vpvq

! 1670:[datamerge] Merges data signals into an array 
      RT_70(1) = Eref
      RT_70(2) = Vpvd

! 1680:[pgb] Output Channel 'd-voltage'

      DO IVD1_1 = 1, 2
         PGB(IPGB+2+IVD1_1-1) = RT_70(IVD1_1)
      ENDDO

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 9) = freq
      STOF(ISTOF + 10) = phi
      STOF(ISTOF + 11) = Qref
      STOF(ISTOF + 12) = Vref
      STOF(ISTOF + 13) = Pref
      STOF(ISTOF + 14) = Vpeak
      STOF(ISTOF + 15) = Ibase
      STOF(ISTOF + 16) = Imax
      STOF(ISTOF + 17) = Pmax
      STOF(ISTOF + 18) = Pmin
      STOF(ISTOF + 19) = Qmax
      STOF(ISTOF + 20) = Qmin
      STOF(ISTOF + 21) = Kp_lim
      STOF(ISTOF + 22) = Ti_lim
      STOF(ISTOF + 23) = w_base
      STOF(ISTOF + 24) = w_type
      STOF(ISTOF + 25) = Kppll
      STOF(ISTOF + 26) = Kipll_T
      STOF(ISTOF + 27) = Kpp
      STOF(ISTOF + 28) = Kip_T
      STOF(ISTOF + 29) = Kdrp
      STOF(ISTOF + 30) = Kpv
      STOF(ISTOF + 31) = Kiv_T
      STOF(ISTOF + 32) = Kpvq
      STOF(ISTOF + 33) = Kivq
      STOF(ISTOF + 34) = Kpq
      STOF(ISTOF + 35) = Kiq_T
      STOF(ISTOF + 36) = DVS_dbd
      STOF(ISTOF + 37) = DVS_gain
      STOF(ISTOF + 38) = v_drp
      STOF(ISTOF + 39) = Kp_rocof
      STOF(ISTOF + 40) = Ti_rocof
      STOF(ISTOF + 41) = Qflag
      STOF(ISTOF + 42) = Vflag
      STOF(ISTOF + 43) = PQflag
      STOF(ISTOF + 44) = Vdip
      STOF(ISTOF + 45) = Vup
      STOF(ISTOF + 46) = T_frz
      STOF(ISTOF + 47) = K_pod
      STOF(ISTOF + 48) = Tw_pod
      STOF(ISTOF + 49) = T1_pod
      STOF(ISTOF + 50) = T2_pod
      STOF(ISTOF + 51) = vd_Kp
      STOF(ISTOF + 52) = vd_Ki_T
      STOF(ISTOF + 53) = d_vsm
      STOF(ISTOF + 54) = m_vsm
      STOF(ISTOF + 55) = Cfilter_pu
      STOF(ISTOF + 56) = Dblk
      STOF(ISTOF + 57) = phis
      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 67) = RT_3
      STOF(ISTOF + 68) = RT_4
      STOF(ISTOF + 69) = RT_5
      STOF(ISTOF + 70) = RT_6
      STOF(ISTOF + 71) = RT_7
      STOF(ISTOF + 72) = RT_8
      STOF(ISTOF + 73) = RT_9
      STOF(ISTOF + 74) = RT_10
      STOF(ISTOF + 78) = RT_11
      STOF(ISTOF + 79) = RT_12
      STOF(ISTOF + 80) = RT_13
      STOF(ISTOF + 81) = RT_14
      STOF(ISTOF + 82) = RT_15
      STOF(ISTOF + 83) = RT_16
      STOF(ISTOF + 84) = RT_17
      STOF(ISTOF + 85) = RT_18
      STOF(ISTOF + 86) = RT_19
      STOF(ISTOF + 87) = RT_20
      STOF(ISTOF + 88) = RT_21
      STOF(ISTOF + 89) = RT_22
      STOF(ISTOF + 90) = RT_23
      STOF(ISTOF + 91) = RT_24
      STOF(ISTOF + 92) = Ipvd
      STOF(ISTOF + 93) = Ipvq
      STOI(ISTOI + 2) = P_Q_Dblk
      STOF(ISTOF + 94) = RT_25
      STOF(ISTOF + 95) = Id_init
      STOF(ISTOF + 96) = RT_26
      STOF(ISTOF + 97) = RT_27
      STOF(ISTOF + 98) = RT_28
      STOF(ISTOF + 99) = RT_29
      STOF(ISTOF + 100) = RT_30
      STOF(ISTOF + 101) = RT_31
      STOF(ISTOF + 102) = RT_32
      STOF(ISTOF + 103) = RT_33
      STOF(ISTOF + 104) = RT_34
      STOI(ISTOI + 3) = P_Q_RST
      STOF(ISTOF + 105) = RT_35
      STOF(ISTOF + 106) = RT_36
      STOF(ISTOF + 107) = RT_37
      STOF(ISTOF + 108) = RT_38
      STOF(ISTOF + 109) = RT_39
      STOF(ISTOF + 110) = RT_40
      STOF(ISTOF + 111) = RT_41
      STOF(ISTOF + 112) = RT_42
      STOF(ISTOF + 113) = RT_43
      STOF(ISTOF + 114) = RT_44
      STOF(ISTOF + 115) = Verr
      STOF(ISTOF + 116) = RT_45
      STOF(ISTOF + 117) = RT_46
      STOF(ISTOF + 118) = RT_47
      STOF(ISTOF + 119) = RT_48
      STOF(ISTOF + 120) = RT_49
      STOF(ISTOF + 121) = RT_50
      STOF(ISTOF + 122) = RT_51
      STOF(ISTOF + 123) = RT_52
      STOF(ISTOF + 124) = RT_53
      STOF(ISTOF + 125) = RT_54
      STOF(ISTOF + 126) = Iq_init
      STOF(ISTOF + 127) = Q_pi_init
      STOF(ISTOF + 128) = RT_55
      STOF(ISTOF + 129) = RT_56
      STOF(ISTOF + 130) = RT_57
      STOF(ISTOF + 131) = RT_58
      STOF(ISTOF + 132) = RT_59
      STOF(ISTOF + 133) = RT_60
      STOF(ISTOF + 134) = RT_61
      STOF(ISTOF + 135) = RT_62
      STOF(ISTOF + 136) = RT_63
      STOF(ISTOF + 137) = RT_64
      STOF(ISTOF + 138) = RT_65
      STOF(ISTOF + 139) = RT_66
      STOF(ISTOF + 140) = RT_67
      STOF(ISTOF + 141) = RT_68
      STOI(ISTOI + 4) = Vfrz
      STOF(ISTOF + 142) = Pelec
      STOF(ISTOF + 143) = RT_69
      STOF(ISTOF + 144) = Qelec
      STOF(ISTOF + 145) = Eref
      STOF(ISTOF + 148) = RT_71
      STOF(ISTOF + 149) = RT_72
      STOF(ISTOF + 150) = RT_73
      STOF(ISTOF + 151) = RT_74
      STOF(ISTOF + 152) = RT_75
      STOF(ISTOF + 153) = RT_76
      STOF(ISTOF + 154) = RT_77
      STOF(ISTOF + 155) = RT_78
      STOF(ISTOF + 156) = RT_79
      STOF(ISTOF + 157) = RT_80
      STOF(ISTOF + 158) = Vpvq
      STOF(ISTOF + 159) = RT_81
      STOF(ISTOF + 160) = RT_82
      STOF(ISTOF + 161) = Freq_pll_pu
      STOF(ISTOF + 162) = RT_83
      STOF(ISTOF + 163) = RT_84
      STOF(ISTOF + 164) = IqMin
      STOF(ISTOF + 165) = IqMax
      STOF(ISTOF + 166) = RT_85
      STOF(ISTOF + 167) = RT_86
      STOF(ISTOF + 168) = IdMax
      STOF(ISTOF + 169) = IdMin
      STOF(ISTOF + 170) = RT_87
      STOF(ISTOF + 171) = RT_88
      STOF(ISTOF + 172) = RT_89
      STOF(ISTOF + 173) = RT_90
      STOF(ISTOF + 174) = RT_91
      STOF(ISTOF + 175) = Ipvd_ref
      STOF(ISTOF + 176) = Ipvq_ref
      STOF(ISTOF + 177) = RT_92
      STOF(ISTOF + 178) = Vpvd
      STOF(ISTOF + 179) = RT_93
      STOF(ISTOF + 180) = Pref_lim
      STOF(ISTOF + 181) = Qref_lim

! Array (1:2) quantities...
      DO IT_0 = 1,2
         STOF(ISTOF + 6 + IT_0) = I_ref_dq(IT_0)
         STOF(ISTOF + 61 + IT_0) = RT_2(IT_0)
         STOF(ISTOF + 145 + IT_0) = RT_70(IT_0)
      END DO

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 0 + IT_0) = Iabc(IT_0)
         STOF(ISTOF + 3 + IT_0) = Vabc(IT_0)
         STOF(ISTOF + 63 + IT_0) = Ipvabc(IT_0)
         STOF(ISTOF + 74 + IT_0) = Vpvabc(IT_0)
      END DO

! Array (1:4) quantities...
      DO IT_0 = 1,4
         STOF(ISTOF + 57 + IT_0) = RT_1(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------
      !I_ref_dq is output
      !freq     is output
      !phi      is output

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Control_12_2_1_1_1_1Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EPRI_PLL_22_2_1_1_1_1Out  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_45, RT_68, RT_76, RT_92

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC          ! Storage Indices
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NPGB      = NPGB + 3
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_4     = STOF(ISTOF + 68)
      RT_45    = STOF(ISTOF + 116)
      RT_68    = STOF(ISTOF + 141)
      RT_76    = STOF(ISTOF + 153)
      RT_92    = STOF(ISTOF + 177)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Control_12_2_1_1_1_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 180:[const] Real Constant 'sqrt(2)'

      RT_4 = 1.414213

! 520:[const] Real Constant 'Fref'

      RT_45 = 1.0

! 530:[emtconst] Commonly Used Constants (pi...) 
      RT_76 = TWO_PI

! 580:[const] Real Constant 'Vqref'

      RT_68 = 0.0

! 600:[const] Real Constant 

      RT_92 = 1.0

! 880:[EPRI_PLL_22_2_1_1_1_1]  
      CALL EPRI_PLL_22_2_1_1_1_1Out()


!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 68) = RT_4
      STOF(ISTOF + 116) = RT_45
      STOF(ISTOF + 141) = RT_68
      STOF(ISTOF + 153) = RT_76
      STOF(ISTOF + 177) = RT_92


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Control_12_2_1_1_1_1Dyn_Begin(DVS_dbd, DVS_gain,       &
     &   T_frz)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EPRI_PLL_22_2_1_1_1_1Dyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: DVS_dbd, DVS_gain
      REAL,    INTENT(IN)  :: T_frz

! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_45, RT_68, RT_76, RT_92

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 60:[time-sig] Output of Simulation Time 

! 180:[const] Real Constant 'sqrt(2)'
      RT_4 = 1.414213

! 520:[const] Real Constant 'Fref'
      RT_45 = 1.0

! 530:[emtconst] Commonly Used Constants (pi...) 
      RT_76 = TWO_PI

! 540:[div_171_1_2_1_1_1_1] Divider 

! 550:[div_171_1_2_1_1_1_1] Divider 

! 560:[gain] Gain Block 

! 570:[square] Square 

! 580:[const] Real Constant 'Vqref'
      RT_68 = 0.0

! 590:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 600:[const] Real Constant 
      RT_92 = 1.0

! 610:[compare] Single Input Level Comparator 

! 620:[div_172_1_2_1_1_1_1] Divider 

! 630:[datatap] Scalar/Array Tap 

! 640:[bin_delay] Timed ON/OFF Logic Transition 

! 650:[mult] Multiplier 

! 660:[datatap] Scalar/Array Tap 

! 670:[monostable] Interpolated Monostable MultiVibrator 

! 680:[datatap] Scalar/Array Tap 

! 690:[div_172_1_2_1_1_1_1] Divider 

! 700:[datatap] Scalar/Array Tap 

! 710:[datatap] Scalar/Array Tap 

! 720:[datatap] Scalar/Array Tap 

! 730:[abcdq61_2_1_1_1_1] abc dq0 transformation 

! 740:[trans_filt] Nth Order Butterworth/Chebyshev Filter 

! 750:[compar] Two Input Comparator 

! 760:[compar] Two Input Comparator 

! 780:[inv] Interpolated Logic Inverter 

! 790:[mult] Multiplier 

! 800:[mult] Multiplier 

! 810:[mult] Multiplier 

! 820:[sumjct] Summing/Differencing Junctions 

! 830:[abcdq60_2_1_1_1_1] abc dq0 transformation 

! 840:[trans_filt] Nth Order Butterworth/Chebyshev Filter 

! 850:[mult] Multiplier 

! 860:[sumjct] Summing/Differencing Junctions 

! 870:[datamerge] Merges data signals into an array 

! 880:[EPRI_PLL_22_2_1_1_1_1]  
      CALL EPRI_PLL_22_2_1_1_1_1Dyn_Begin(T_frz)


! 890:[trans_filt] Nth Order Butterworth/Chebyshev Filter 

! 900:[trans_filt] Nth Order Butterworth/Chebyshev Filter 

! 910:[square] Square 

! 920:[datatap] Scalar/Array Tap 

! 930:[sumjct] Summing/Differencing Junctions 

! 940:[square] Square 

! 950:[sumjct] Summing/Differencing Junctions 

! 960:[sumjct] Summing/Differencing Junctions 

! 970:[diffpole] Differential Pole 

! 980:[sumjct] Summing/Differencing Junctions 

! 990:[sumjct] Summing/Differencing Junctions 

! 1000:[gain] Gain Block 

! 1010:[gain] Gain Block 

! 1020:[sqrt] Square Root 

! 1030:[div_171_1_2_1_1_1_1] Divider 

! 1040:[leadlag] Lead-Lag 

! 1050:[gain] Gain Block 

! 1060:[datatap] Scalar/Array Tap 

! 1070:[sumjct] Summing/Differencing Junctions 

! 1080:[deadband_28_1_1_1] Deadband with offset and gain 
      RTCF(NRTCF)   = 0.5*ABS(DVS_dbd)
      RTCF(NRTCF+1) = ABS(DVS_gain)
      RTCF(NRTCF+2) = ABS(0.0)
      NRTCF = NRTCF + 3

! 1090:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1100:[sumjct] Summing/Differencing Junctions 

! 1110:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 1120:[sumjct] Summing/Differencing Junctions 

! 1130:[gain] Gain Block 

! 1140:[sumjct] Summing/Differencing Junctions 

! 1150:[gain] Gain Block 

! 1160:[gain] Gain Block 

! 1170:[sumjct] Summing/Differencing Junctions 

! 1180:[gain] Gain Block 

! 1190:[gain] Gain Block 

! 1200:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1210:[sumjct] Summing/Differencing Junctions 

! 1220:[gain] Gain Block 

! 1230:[sumjct] Summing/Differencing Junctions 

! 1240:[gain] Gain Block 

! 1250:[gain] Gain Block 

! 1260:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1270:[sumjct] Summing/Differencing Junctions 

! 1280:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 1290:[mult] Multiplier 

! 1300:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1310:[sumjct] Summing/Differencing Junctions 

! 1320:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1330:[mult] Multiplier 

! 1340:[sumjct] Summing/Differencing Junctions 

! 1350:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1360:[sumjct] Summing/Differencing Junctions 

! 1370:[gain] Gain Block 

! 1380:[gain] Gain Block 

! 1390:[gain] Gain Block 

! 1400:[hardlimit] Hard Limiter 

! 1410:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1420:[mult] Multiplier 

! 1430:[sumjct] Summing/Differencing Junctions 

! 1440:[square] Square 

! 1450:[sumjct] Summing/Differencing Junctions 

! 1460:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 1470:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1480:[mult] Multiplier 

! 1490:[sqrt] Square Root 

! 1500:[sumjct] Summing/Differencing Junctions 

! 1510:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1520:[hardlimit] Hard Limiter 

! 1530:[square] Square 

! 1540:[sumjct] Summing/Differencing Junctions 

! 1550:[sqrt] Square Root 

! 1560:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 1570:[gain] Gain Block 

! 1580:[gain] Gain Block 

! 1590:[gain_50_2_1_1_1_1] Gain Block 

! 1600:[gain] Gain Block 

! 1610:[gain] Gain Block 

! 1620:[div_171_1_2_1_1_1_1] Divider 

! 1630:[gain_50_2_1_1_1_1] Gain Block 

! 1640:[datamerge] Merges data signals into an array 

! 1660:[pgb] Output Channel 'q-voltage'

! 1670:[datamerge] Merges data signals into an array 

! 1680:[pgb] Output Channel 'd-voltage'

      RETURN
      END

!=======================================================================

      SUBROUTINE Control_12_2_1_1_1_1Out_Begin(DVS_dbd, DVS_gain,       &
     &   T_frz)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EPRI_PLL_22_2_1_1_1_1Out_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: DVS_dbd, DVS_gain
      REAL,    INTENT(IN)  :: T_frz

! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_45, RT_68, RT_76, RT_92

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 180:[const] Real Constant 'sqrt(2)'
      RT_4 = 1.414213

! 520:[const] Real Constant 'Fref'
      RT_45 = 1.0

! 530:[emtconst] Commonly Used Constants (pi...) 
      RT_76 = TWO_PI

! 580:[const] Real Constant 'Vqref'
      RT_68 = 0.0

! 600:[const] Real Constant 
      RT_92 = 1.0

! 880:[EPRI_PLL_22_2_1_1_1_1]  
      CALL EPRI_PLL_22_2_1_1_1_1Out_Begin(T_frz)


      RETURN
      END

