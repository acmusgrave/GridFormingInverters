!=======================================================================
! Generated by: PSCAD v5.0.2.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : EPRI_PLL_22_2_1_1_1_1
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE EPRI_PLL_22_2_1_1_1_1Dyn(freq, theta, Vabc, VRT,       &
     &   P_Q_ref_meas, Eref, Vref, P_Q_ref_lim, w_type, Dblk, Wmax,     &
     &   Kppll, Kipll_T, w0, df, Kp_Rocof, Ti_Rocof, dv, dd, mf, Tfrz,  &
     &   Pmax, Pmin, Qmax, Qmin, Kp_lim, Ti_lim)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
!     SUBR    EMTDC_XONDLAY  ! 'Delay Function with Interpolation'
      REAL    REALPOLE      ! Real Pole
      REAL    EMTDC_XINT    ! 'Integrator /w Interpolation'
!     SUBR    EMTDC_XMSTAB  ! 'Monostable Multivibrator /w Interpolation'
!     SUBR    TRDQO         ! DQ0 transformation
!     SUBR    FILN15        ! Nth-order Butterworth/Chebyshev Filter
      REAL    DIFFPOLE      ! Differential Pole Function
!     SUBR    SANDH2        ! Sample and Hold
      REAL    LIMIT         ! Hard Limiter

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Vabc(3), VRT
      REAL,    INTENT(IN)  :: P_Q_ref_meas(4)
      REAL,    INTENT(IN)  :: Vref, w_type, Dblk
      REAL,    INTENT(IN)  :: Wmax, Kppll
      REAL,    INTENT(IN)  :: Kipll_T, w0, df
      REAL,    INTENT(IN)  :: Kp_Rocof, Ti_Rocof
      REAL,    INTENT(IN)  :: dv, dd, mf, Tfrz
      REAL,    INTENT(IN)  :: Pmax, Pmin, Qmax
      REAL,    INTENT(IN)  :: Qmin, Kp_lim
      REAL,    INTENT(IN)  :: Ti_lim
      REAL,    INTENT(OUT) :: freq, theta, Eref
      REAL,    INTENT(OUT) :: P_Q_ref_lim(2)

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, IT_2, lim_frz
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5, RT_6
      REAL     Kipll_max, Kipll_min, RT_7, RT_8
      REAL     RT_9, RT_10, theta_int, RT_11
      REAL     RT_12, RT_13, RT_14, RT_15, RT_16
      REAL     RT_17(2), Vpvd, Vpvq, Wmin, RT_18
      REAL     RT_19, RT_20, RT_21, RT_22(2)
      REAL     RT_23(2), RT_24(2), RT_25(2)
      REAL     RT_26(2), RT_27, RT_28, RT_29
      REAL     RT_30, RT_31, RT_32, RT_33, RT_34
      REAL     RT_35, RT_36, RT_37, RT_38, RT_39
      REAL     RT_40, RT_41, RT_42, RT_43, RT_44
      REAL     RT_45, RT_46, RT_47, RT_48, RT_49
      REAL     RT_50, RT_51, RT_52, RT_53, Qerr
      REAL     RT_54, RT_55, RT_56, RT_57, RT_58
      REAL     RT_59, RT_60, Tf, Tv, Kv, Kf, Tr
      REAL     RT_61, RT_62, RT_63, Kd, RT_64
      REAL     RT_65, RT_66, K1, RT_67, RT_68
      REAL     RT_69, RT_70, RT_71, RT_72, RT_73
      REAL     RT_74, RT_75, RT_76, RT_77, RT_78
      REAL     RT_79, RT_80, RT_81, K2, RT_82
      REAL     RT_83, theta_vsm, RT_84, RT_85
      REAL     RT_86, RT_87, RT_88, RT_89, RT_90
      REAL     RT_91, RT_92, RT_93, RT_94, RT_95
      REAL     Perr, RT_96, RT_97, RT_98, RT_99
      REAL     RT_100, RT_101, RT_102, RT_103
      REAL     RT_104, RT_105, RT_106, RT_107
      REAL     RT_108, RT_109, RT_110, P_Q_out(2)
      REAL     RT_111(2), RT_112, RT_113, RT_114
      REAL     RT_115

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD2_1(2), RVD2_2(2), RVD1_1
      REAL     RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 3
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 174
      IPGB      = NPGB
      NPGB      = NPGB + 5
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      freq     = STOF(ISTOF + 1)
      theta    = STOF(ISTOF + 2)
      Eref     = STOF(ISTOF + 11)
      RT_1     = STOF(ISTOF + 34)
      RT_2     = STOF(ISTOF + 35)
      RT_3     = STOF(ISTOF + 36)
      RT_4     = STOF(ISTOF + 37)
      RT_5     = STOF(ISTOF + 38)
      RT_6     = STOF(ISTOF + 39)
      Kipll_max = STOF(ISTOF + 40)
      Kipll_min = STOF(ISTOF + 41)
      RT_7     = STOF(ISTOF + 42)
      RT_8     = STOF(ISTOF + 43)
      IT_1     = STOI(ISTOI + 1)
      RT_9     = STOF(ISTOF + 44)
      RT_10    = STOF(ISTOF + 45)
      theta_int = STOF(ISTOF + 46)
      RT_11    = STOF(ISTOF + 47)
      RT_12    = STOF(ISTOF + 48)
      RT_13    = STOF(ISTOF + 49)
      RT_14    = STOF(ISTOF + 50)
      RT_15    = STOF(ISTOF + 51)
      RT_16    = STOF(ISTOF + 52)
      Vpvd     = STOF(ISTOF + 55)
      Vpvq     = STOF(ISTOF + 56)
      Wmin     = STOF(ISTOF + 57)
      RT_18    = STOF(ISTOF + 58)
      RT_19    = STOF(ISTOF + 59)
      RT_20    = STOF(ISTOF + 60)
      RT_21    = STOF(ISTOF + 61)
      RT_27    = STOF(ISTOF + 72)
      RT_28    = STOF(ISTOF + 73)
      RT_29    = STOF(ISTOF + 74)
      RT_30    = STOF(ISTOF + 75)
      RT_31    = STOF(ISTOF + 76)
      RT_32    = STOF(ISTOF + 77)
      RT_33    = STOF(ISTOF + 78)
      RT_34    = STOF(ISTOF + 79)
      RT_35    = STOF(ISTOF + 80)
      RT_36    = STOF(ISTOF + 81)
      RT_37    = STOF(ISTOF + 82)
      RT_38    = STOF(ISTOF + 83)
      RT_39    = STOF(ISTOF + 84)
      RT_40    = STOF(ISTOF + 85)
      RT_41    = STOF(ISTOF + 86)
      RT_42    = STOF(ISTOF + 87)
      RT_43    = STOF(ISTOF + 88)
      RT_44    = STOF(ISTOF + 89)
      RT_45    = STOF(ISTOF + 90)
      RT_46    = STOF(ISTOF + 91)
      RT_47    = STOF(ISTOF + 92)
      RT_48    = STOF(ISTOF + 93)
      RT_49    = STOF(ISTOF + 94)
      RT_50    = STOF(ISTOF + 95)
      RT_51    = STOF(ISTOF + 96)
      RT_52    = STOF(ISTOF + 97)
      RT_53    = STOF(ISTOF + 98)
      Qerr     = STOF(ISTOF + 99)
      RT_54    = STOF(ISTOF + 100)
      RT_55    = STOF(ISTOF + 101)
      RT_56    = STOF(ISTOF + 102)
      RT_57    = STOF(ISTOF + 103)
      RT_58    = STOF(ISTOF + 104)
      RT_59    = STOF(ISTOF + 105)
      RT_60    = STOF(ISTOF + 106)
      Tf       = STOF(ISTOF + 107)
      Tv       = STOF(ISTOF + 108)
      Kv       = STOF(ISTOF + 109)
      Kf       = STOF(ISTOF + 110)
      Tr       = STOF(ISTOF + 111)
      RT_61    = STOF(ISTOF + 112)
      RT_62    = STOF(ISTOF + 113)
      RT_63    = STOF(ISTOF + 114)
      Kd       = STOF(ISTOF + 115)
      RT_64    = STOF(ISTOF + 116)
      RT_65    = STOF(ISTOF + 117)
      RT_66    = STOF(ISTOF + 118)
      K1       = STOF(ISTOF + 119)
      RT_67    = STOF(ISTOF + 120)
      RT_68    = STOF(ISTOF + 121)
      RT_69    = STOF(ISTOF + 122)
      RT_70    = STOF(ISTOF + 123)
      RT_71    = STOF(ISTOF + 124)
      RT_72    = STOF(ISTOF + 125)
      RT_73    = STOF(ISTOF + 126)
      RT_74    = STOF(ISTOF + 127)
      RT_75    = STOF(ISTOF + 128)
      RT_76    = STOF(ISTOF + 129)
      RT_77    = STOF(ISTOF + 130)
      RT_78    = STOF(ISTOF + 131)
      RT_79    = STOF(ISTOF + 132)
      RT_80    = STOF(ISTOF + 133)
      RT_81    = STOF(ISTOF + 134)
      K2       = STOF(ISTOF + 135)
      RT_82    = STOF(ISTOF + 136)
      RT_83    = STOF(ISTOF + 137)
      theta_vsm = STOF(ISTOF + 138)
      RT_84    = STOF(ISTOF + 139)
      RT_85    = STOF(ISTOF + 140)
      RT_86    = STOF(ISTOF + 141)
      RT_87    = STOF(ISTOF + 142)
      RT_88    = STOF(ISTOF + 143)
      RT_89    = STOF(ISTOF + 144)
      RT_90    = STOF(ISTOF + 145)
      RT_91    = STOF(ISTOF + 146)
      RT_92    = STOF(ISTOF + 147)
      RT_93    = STOF(ISTOF + 148)
      RT_94    = STOF(ISTOF + 149)
      RT_95    = STOF(ISTOF + 150)
      Perr     = STOF(ISTOF + 151)
      RT_96    = STOF(ISTOF + 152)
      RT_97    = STOF(ISTOF + 153)
      RT_98    = STOF(ISTOF + 154)
      RT_99    = STOF(ISTOF + 155)
      RT_100   = STOF(ISTOF + 156)
      RT_101   = STOF(ISTOF + 157)
      RT_102   = STOF(ISTOF + 158)
      RT_103   = STOF(ISTOF + 159)
      RT_104   = STOF(ISTOF + 160)
      RT_105   = STOF(ISTOF + 161)
      IT_2     = STOI(ISTOI + 2)
      RT_106   = STOF(ISTOF + 162)
      RT_107   = STOF(ISTOF + 163)
      RT_108   = STOF(ISTOF + 164)
      RT_109   = STOF(ISTOF + 165)
      RT_110   = STOF(ISTOF + 166)
      RT_112   = STOF(ISTOF + 171)
      lim_frz  = STOI(ISTOI + 3)
      RT_113   = STOF(ISTOF + 172)
      RT_114   = STOF(ISTOF + 173)
      RT_115   = STOF(ISTOF + 174)

! Array (1:2) quantities...
      DO IT_0 = 1,2
         P_Q_ref_lim(IT_0) = STOF(ISTOF + 12 + IT_0)
         RT_17(IT_0) = STOF(ISTOF + 52 + IT_0)
         RT_22(IT_0) = STOF(ISTOF + 61 + IT_0)
         RT_23(IT_0) = STOF(ISTOF + 63 + IT_0)
         RT_24(IT_0) = STOF(ISTOF + 65 + IT_0)
         RT_25(IT_0) = STOF(ISTOF + 67 + IT_0)
         RT_26(IT_0) = STOF(ISTOF + 69 + IT_0)
         P_Q_out(IT_0) = STOF(ISTOF + 166 + IT_0)
         RT_111(IT_0) = STOF(ISTOF + 168 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'EPRI_PLL_22_2_1_1_1_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 120:[datatap] Scalar/Array Tap 
      RT_24 = P_Q_ref_meas(1 : 2)

! 170:[datatap] Scalar/Array Tap 
      RT_22 = P_Q_ref_meas(3 : 4)

! 210:[const] Real Constant 
      RT_115 = 0.0

! 250:[gain] Gain Block 
!  Gain
      Wmin = -1.0 * Wmax

! 270:[datatap] Scalar/Array Tap 
      RT_12 = Vabc(1)

! 280:[const] Real Constant 
      RT_39 = 1.0e-05

! 290:[datatap] Scalar/Array Tap 
      RT_13 = Vabc(2)

! 300:[const] Real Constant 
      RT_47 = 0.01

! 310:[datatap] Scalar/Array Tap 
      RT_14 = Vabc(3)

! 320:[emtconst] Commonly Used Constants (pi...) 
      RT_95 = BY180_PI

! 340:[const] Real Constant 
      RT_4 = 0.0

! 350:[const] Real Constant 
      RT_19 = 0.0

! 360:[const] Real Constant 
      RT_42 = 1.0

! 370:[datatap] Scalar/Array Tap 
      RT_88 = Vabc(1)

! 380:[div] Divider 
      IF (ABS(df) .LT. 1.0E-100) THEN
         IF (df .LT. 0.0)  THEN
            RT_41 = -1.0E100 * RT_42
         ELSE
            RT_41 =  1.0E100 * RT_42
         ENDIF
      ELSE
         RT_41 = RT_42 / df
      ENDIF

! 400:[datatap] Scalar/Array Tap 
      RT_89 = Vabc(2)

! 410:[time-sig] Output of Simulation Time 
      RT_38 = TIME

! 420:[datatap] Scalar/Array Tap 
      RT_90 = Vabc(3)

! 440:[time-sig] Output of Simulation Time 
      RT_20 = TIME

! 450:[time-sig] Output of Simulation Time 
      RT_112 = TIME

! 460:[const] Real Constant 
      RT_44 = 1.0

! 470:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,1.0,RT_112,0.0,0.0,1.0,RVD2_1)
      RT_96 = RVD2_1(1)

! 480:[div] Divider 
      IF (ABS(dv) .LT. 1.0E-100) THEN
         IF (dv .LT. 0.0)  THEN
            RT_43 = -1.0E100 * RT_44
         ELSE
            RT_43 =  1.0E100 * RT_44
         ENDIF
      ELSE
         RT_43 = RT_44 / dv
      ENDIF

! 490:[const] Real Constant 'del_w0'
      RT_32 = 0.0

! 510:[const] Real Constant 
      RT_46 = 1.0

! 520:[div] Divider 
      IF (ABS(w0) .LT. 1.0E-100) THEN
         IF (w0 .LT. 0.0)  THEN
            RT_45 = -1.0E100 * RT_46
         ELSE
            RT_45 =  1.0E100 * RT_46
         ENDIF
      ELSE
         RT_45 = RT_46 / w0
      ENDIF

! 530:[const] Real Constant 
      RT_58 = 1.0e-05

! 550:[div] Divider 
      IF (ABS(df) .LT. 1.0E-100) THEN
         IF (df .LT. 0.0)  THEN
            RT_59 = -1.0E100 * mf
         ELSE
            RT_59 =  1.0E100 * mf
         ENDIF
      ELSE
         RT_59 = mf / df
      ENDIF

! 560:[const] Real Constant 
      RT_29 = 1.0e-05

! 580:[div] Divider 
      IF (ABS(df) .LT. 1.0E-100) THEN
         IF (df .LT. 0.0)  THEN
            RT_62 = -1.0E100 * dd
         ELSE
            RT_62 =  1.0E100 * dd
         ENDIF
      ELSE
         RT_62 = dd / df
      ENDIF

! 590:[const] Real Constant 
      RT_61 = 1.0

! 600:[const] Real Constant 
      RT_63 = 0.0

! 610:[const] Real Constant 
      RT_57 = 1.0

! 650:[const] Real Constant 
      RT_67 = 1.0

! 660:[div] Divider 
      IF (ABS(df) .LT. 1.0E-100) THEN
         IF (df .LT. 0.0)  THEN
            K1 = -1.0E100 * RT_67
         ELSE
            K1 =  1.0E100 * RT_67
         ENDIF
      ELSE
         K1 = RT_67 / df
      ENDIF

! 670:[const] Real Constant 
      RT_68 = 100.0

! 680:[time-sig] Output of Simulation Time 
      RT_66 = TIME

! 690:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,0.5,RT_66,0.0,0.0,1.0,RVD2_1)
      RT_65 = RVD2_1(1)

! 700:[x_power_y] X to the power of Y 
      IF (RT_68 .GT. 1.0E-10) THEN
        RT_69 = RT_68**4.0
      ELSEIF (RT_68 .LT. 1.0E-10) THEN
        RT_69 = 0.0
      ELSE
        RT_69 = 0.0
      ENDIF

! 710:[gain] Gain Block 
!  Gain
      RT_81 = 4.0 * RT_69

! 720:[square] Square 
      RT_76 = RT_68 * RT_68

! 730:[const] Real Constant 
      RT_73 = 1.0

! 740:[div] Divider 
      IF (ABS(dv) .LT. 1.0E-100) THEN
         IF (dv .LT. 0.0)  THEN
            RT_72 = -1.0E100 * RT_73
         ELSE
            RT_72 =  1.0E100 * RT_73
         ENDIF
      ELSE
         RT_72 = RT_73 / dv
      ENDIF

! 750:[mult] Multiplier 
      RT_70 = RT_72 * RT_68

! 760:[inv] Interpolated Logic Inverter 
      IF (NINT(VRT) .NE. 0) THEN
         IT_2 = 0
      ELSE
         IT_2 = 1
      ENDIF

! 770:[delay] Binary ON Delay with Interpolation 
!
      RVD2_1(1) = FLOAT(IT_2)
      RVD2_1(2) = 0.0
      CALL EMTDC_XONDLAY(0,Tfrz,RVD2_1,RVD2_2)
      lim_frz = NINT(RVD2_2(1))

! 780:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         Tr = RT_39
      ELSE
         Tr = RT_47
      ENDIF
      NRTCI = NRTCI + 1
!

! 790:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,Dblk,RT_38,0.0,0.0,1.0,RVD2_1)
      RT_21 = RVD2_1(1)

! 800:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,Dblk,RT_20,0.0,0.0,1.0,RVD2_1)
      RT_18 = RVD2_1(1)

! 810:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         Tv = RT_45
      ELSE
         Tv = RT_58
      ENDIF
      NRTCI = NRTCI + 1
!

! 820:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         Tf = RT_59
      ELSE
         Tf = RT_29
      ENDIF
      NRTCI = NRTCI + 1
!

! 830:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         Kd = RT_62
      ELSE
         Kd = RT_63
      ENDIF
      NRTCI = NRTCI + 1
!

! 840:[sumjct] Summing/Differencing Junctions 
      RT_71 = + RT_68 - RT_70

! 850:[square] Square 
      RT_74 = RT_71 * RT_71

! 860:[gain] Gain Block 
!  Gain
      RT_75 = 2.0 * RT_74

! 870:[realpole] Real Pole 
!  Real_Pole
      DO IVD1_1=1,2
        RT_23(IVD1_1) = REALPOLE(0,1,0,1.0,Tr,RT_22(IVD1_1),0.0,-1.0E20,&
     &1.0E20)
      ENDDO

! 880:[datatap] Scalar/Array Tap 
      RT_97 = RT_23(1)

! 890:[realpole] Real Pole 
!  Real_Pole
      RT_98 = REALPOLE(0,1,1,1.0,0.001,RT_97,0.0,Pmin,Pmax)

! 900:[sumjct] Summing/Differencing Junctions 
      RT_99 = - RT_97 + RT_98

! 910:[gain] Gain Block 
!  Gain
      RT_104 = REAL(lim_frz) * RT_99

! 920:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_104
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      RT_105 = EMTDC_XINT(0, 0, 0, RVD1_1, Ti_lim, 0.0, -10.0, 10.0, RVD&
     &2_2, RVD2_1)

! 930:[datatap] Scalar/Array Tap 
      RT_100 = RT_23(2)

! 940:[datamerge] Merges data signals into an array 
      P_Q_out(1) = RT_97
      P_Q_out(2) = RT_100

! 950:[realpole] Real Pole 
!  Real_Pole
      RT_101 = REALPOLE(0,1,1,1.0,0.001,RT_100,0.0,Qmin,Qmax)

! 960:[sumjct] Summing/Differencing Junctions 
      RT_102 = + RT_101 - RT_100

! 970:[gain] Gain Block 
!  Gain
      RT_108 = REAL(lim_frz) * RT_102

! 980:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_108
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      RT_109 = EMTDC_XINT(0, 0, 0, RVD1_1, Ti_lim, 0.0, -10.0, 10.0, RVD&
     &2_2, RVD2_1)

! 990:[monostable] Interpolated Monostable MultiVibrator 
!
      RVD2_1(1) = FLOAT(NINT(RT_21))
      RVD2_1(2) = 0.0
      CALL EMTDC_XMSTAB(0,0.1,RVD2_1,RVD2_2)
      IT_1 = NINT(RVD2_2(1))


! 1000:[sumjct] Summing/Differencing Junctions 
      RT_77 = - RT_76 + RT_75

! 1010:[square] Square 
      RT_78 = RT_77 * RT_77

! 1020:[gain] Gain Block 
!  Gain
      RT_103 = Kp_lim * RT_99

! 1030:[sumjct] Summing/Differencing Junctions 
      RT_106 = + RT_103 + RT_105

! 1040:[gain] Gain Block 
!  Gain
      RT_107 = Kp_lim * RT_102

! 1050:[sumjct] Summing/Differencing Junctions 
      RT_110 = + RT_107 + RT_109

! 1060:[datamerge] Merges data signals into an array 
      RT_25(1) = RT_106
      RT_25(2) = RT_110

! 1070:[sumjct] Summing/Differencing Junctions 
      RT_79 = + RT_69 - RT_78

! 1080:[div] Divider 
      IF (ABS(RT_81) .LT. 1.0E-100) THEN
         IF (RT_81 .LT. 0.0)  THEN
            RT_80 = -1.0E100 * RT_79
         ELSE
            RT_80 =  1.0E100 * RT_79
         ENDIF
      ELSE
         RT_80 = RT_79 / RT_81
      ENDIF

! 1090:[div] Divider 
      IF (ABS(RT_80) .LT. 1.0E-100) THEN
         IF (RT_80 .LT. 0.0)  THEN
            K2 = -1.0E100 * K1
         ELSE
            K2 =  1.0E100 * K1
         ENDIF
      ELSE
         K2 = K1 / RT_80
      ENDIF

! 1100:[sumjct] Summing/Differencing Junctions 
      RT_36 = + Vref - RT_35

! 1110:[div] Divider 
      IF (ABS(Eref) .LT. 1.0E-100) THEN
         IF (Eref .LT. 0.0)  THEN
            RT_50 = -1.0E100 * K1
         ELSE
            RT_50 =  1.0E100 * K1
         ENDIF
      ELSE
         RT_50 = K1 / Eref
      ENDIF

! 1120:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         Kv = RT_50
      ELSE
         Kv = RT_43
      ENDIF
      NRTCI = NRTCI + 1
!

! 1130:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(RT_12,RT_13,RT_14,Vpvd,RT_15,RT_16,theta_int,1)
      RT_15 = -RT_15

! 1140:[trans_filt] Nth Order Butterworth/Chebyshev Filter 
!
!  BUTTERWORTH FILTER
!
      CALL COMPONENT_ID(ICALL_NO,1501173688)
      CALL FILN15(3,120.0,0.0, 0.0 ,1,1,0,RT_15,Vpvq)
!

! 1150:[mult] Multiplier 
      RT_6 = Vpvq * Kppll

! 1160:[sumjct] Summing/Differencing Junctions 
      Kipll_max = + Wmax - RT_6

! 1170:[gain] Gain Block 
!  Gain
      Kipll_min = -1.0 * Kipll_max

! 1180:[square] Square 
      RT_49 = Eref * Eref

! 1190:[div] Divider 
      IF (ABS(RT_49) .LT. 1.0E-100) THEN
         IF (RT_49 .LT. 0.0)  THEN
            RT_48 = -1.0E100 * K1
         ELSE
            RT_48 =  1.0E100 * K1
         ENDIF
      ELSE
         RT_48 = K1 / RT_49
      ENDIF

! 1200:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         Kf = RT_48
      ELSE
         Kf = RT_41
      ENDIF
      NRTCI = NRTCI + 1
!

! 1210:[realpole] Real Pole 
!  Real_Pole
      RT_51 = REALPOLE(0,1,0,1.0,0.001,RT_35,0.0,-1.0E20,1.0E20)

! 1220:[gain] Gain Block 
!  Gain
      RT_53 = K2 * RT_51

! 1230:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         RT_60 = RT_53
      ELSE
         RT_60 = RT_57
      ENDIF
      NRTCI = NRTCI + 1
!

! 1240:[mult] Multiplier 
      RT_54 = RT_55 * RT_60

! 1250:[diffpole] Differential Pole 
!  Differential_Pole
      RT_113 = DIFFPOLE(0,1,0,Kp_Rocof,Ti_Rocof,freq,0.0,-1.0E20,1.0E20)

! 1260:[gain] Gain Block 
!  Gain
      RT_114 = REAL(lim_frz) * RT_113

! 1270:[datamerge] Merges data signals into an array 
      RT_26(1) = RT_114
      RT_26(2) = RT_115

! 1280:[sumjct] Summing/Differencing Junctions 
      P_Q_ref_lim = + RT_24 + RT_25 - RT_26

! 1290:[sumjct] Summing/Differencing Junctions 
      RT_111 = + P_Q_ref_lim - P_Q_out

! 1300:[datatap] Scalar/Array Tap 
      RT_27 = RT_111(1)

! 1310:[gain] Gain Block 
!  Gain
      Perr = Kf * RT_27

! 1320:[sandhdefn] Sample and Hold 
!  Sample and Hold
      CALL SANDH2(Perr,NINT(RT_96),  NINT(VRT),  RT_31)

! 1330:[gain] Gain Block 
!  Gain
      RT_84 = Kppll * RT_85

! 1340:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(RT_88,RT_89,RT_90,RT_91,RT_87,RT_92,theta_vsm,1)
      RT_87 = -RT_87

! 1350:[ratelimit] Rate Limiter 
!  Rate_Limiter
      CALL RATE_LIMITER(1000000.0,10000000.0,RT_87,RT_85)

! 1360:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_85
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      RT_86 = EMTDC_XINT(0, 0, 0, RVD1_1, Kipll_T, 0.0, Kipll_min, Kipll&
     &_max, RVD2_2, RVD2_1)

! 1370:[sumjct] Summing/Differencing Junctions 
      RT_82 = + RT_84 + RT_86

! 1380:[sumjct] Summing/Differencing Junctions 
      RT_83 = + w0 + RT_82

! 1390:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_83
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      theta_vsm = EMTDC_XINT(0, 0, 0, RVD1_1, 1.0, 0.0, -10000000000.0, &
     &10000000000.0, RVD2_2, RVD2_1)

! 1400:[div] Divider 
      IF (ABS(w0) .LT. 1.0E-100) THEN
         IF (w0 .LT. 0.0)  THEN
            RT_64 = -1.0E100 * RT_82
         ELSE
            RT_64 =  1.0E100 * RT_82
         ENDIF
      ELSE
         RT_64 = RT_82 / w0
      ENDIF

! 1410:[gain] Gain Block 
!  Gain
      RT_30 = Kd * RT_64

! 1420:[sumjct] Summing/Differencing Junctions 
      RT_34 = + RT_30 + RT_31 + RT_32 - RT_33

! 1430:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_34
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      RT_33 = EMTDC_XINT(0, 0, 0, RVD1_1, Tf, 0.0, Kipll_min, Kipll_max,&
     & RVD2_2, RVD2_1)

! 1440:[gain] Gain Block 
!  Gain
      RT_37 = w0 * RT_33

! 1450:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         RT_1 = RT_9
      ELSE
         RT_1 = RT_37
      ENDIF
      NRTCI = NRTCI + 1
!

! 1460:[hardlimit_66_2_1_1_1_1] Hard Limiter 
!  Hard_Limit
      IF (Wmin .LE. Wmax) THEN
        RT_2 = LIMIT(Wmin, Wmax, RT_1)
      ELSE
        RT_2 = RT_1
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1707885060,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1470:[select] Two Input Selector 
      IF (NINT(RT_18) .EQ. RTCI(NRTCI)) THEN
         RT_11 = RT_2
      ELSE
         RT_11 = RT_19
      ENDIF
      NRTCI = NRTCI + 1
!

! 1480:[sumjct] Summing/Differencing Junctions 
      RT_10 = + w0 + RT_11

! 1490:[div] Divider 
      IF (ABS(w0) .LT. 1.0E-100) THEN
         IF (w0 .LT. 0.0)  THEN
            freq = -1.0E100 * RT_10
         ELSE
            freq =  1.0E100 * RT_10
         ENDIF
      ELSE
         freq = RT_10 / w0
      ENDIF

! 1500:[datatap] Scalar/Array Tap 
      RT_28 = RT_111(2)

! 1510:[gain] Gain Block 
!  Gain
      Qerr = Kv * RT_28

! 1520:[sumjct] Summing/Differencing Junctions 
      RT_40 = + Qerr + RT_54

! 1530:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_40
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      RT_35 = EMTDC_XINT(0, 0, 0, RVD1_1, Tv, 0.0, Kipll_min, Kipll_max,&
     & RVD2_2, RVD2_1)

! 1540:[sumjct] Summing/Differencing Junctions 
      RT_52 = + RT_51 + Vref

! 1550:[select] Two Input Selector 
      IF (NINT(w_type) .EQ. RTCI(NRTCI)) THEN
         RT_56 = RT_52
      ELSE
         RT_56 = RT_61
      ENDIF
      NRTCI = NRTCI + 1
!

! 1560:[mult] Multiplier 
      RT_55 = RT_36 * RT_56

! 1570:[select] Two Input Selector 
      IF (NINT(RT_65) .EQ. RTCI(NRTCI)) THEN
         Eref = RT_35
      ELSE
         Eref = Vref
      ENDIF
      NRTCI = NRTCI + 1
!

! 1580:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_10
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      theta_int = EMTDC_XINT(0, 0, 0, RVD1_1, 1.0, 0.0, -10000000000.0, &
     &10000000000.0, RVD2_2, RVD2_1)

! 1590:[ratelimit] Rate Limiter 
!  Rate_Limiter
      CALL RATE_LIMITER(100000.0,1000000.0,Vpvq,RT_3)

! 1600:[select] Two Input Selector 
      IF (NINT(VRT) .EQ. RTCI(NRTCI)) THEN
         RT_5 = RT_3
      ELSE
         RT_5 = RT_4
      ENDIF
      NRTCI = NRTCI + 1
!

! 1610:[gain] Gain Block 
!  Gain
      RT_7 = Kppll * RT_3

! 1620:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_5
      RVD2_1(2) = 0.0
      RVD2_2(1) = FLOAT(IT_1)
      RVD2_2(2) = 0.0
      RT_8 = EMTDC_XINT(0, 0, 1, RVD1_1, Kipll_T, 0.0, Kipll_min, Kipll_&
     &max, RVD2_2, RVD2_1)

! 1630:[sumjct] Summing/Differencing Junctions 
      RT_9 = + RT_7 + RT_8

! 1640:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_11
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      RT_93 = EMTDC_XINT(0, 0, 0, RVD1_1, 1.0, 0.0, -10000000000.0, 1000&
     &0000000.0, RVD2_2, RVD2_1)

! 1650:[gain] Gain Block 
!  Gain
      theta = 1.0 * theta_int

! 1660:[mult] Multiplier 
      RT_94 = RT_93 * RT_95

! 1700:[pgb] Output Channel 'd_theta'

      PGB(IPGB+1) = RT_94

! 1710:[datamerge] Merges data signals into an array 
      RT_17(1) = Vpvd
      RT_17(2) = Vpvq

! 1720:[pgb] Output Channel 'Vdq'

      DO IVD1_1 = 1, 2
         PGB(IPGB+2+IVD1_1-1) = RT_17(IVD1_1)
      ENDDO

! 1730:[pgb] Output Channel 'P_Q_ref_lim'

      DO IVD1_1 = 1, 2
         PGB(IPGB+4+IVD1_1-1) = P_Q_ref_lim(IVD1_1)
      ENDDO

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = freq
      STOF(ISTOF + 2) = theta
      STOF(ISTOF + 6) = VRT
      STOF(ISTOF + 11) = Eref
      STOF(ISTOF + 12) = Vref
      STOF(ISTOF + 15) = w_type
      STOF(ISTOF + 16) = Dblk
      STOF(ISTOF + 17) = Wmax
      STOF(ISTOF + 18) = Kppll
      STOF(ISTOF + 19) = Kipll_T
      STOF(ISTOF + 20) = w0
      STOF(ISTOF + 21) = df
      STOF(ISTOF + 22) = Kp_Rocof
      STOF(ISTOF + 23) = Ti_Rocof
      STOF(ISTOF + 24) = dv
      STOF(ISTOF + 25) = dd
      STOF(ISTOF + 26) = mf
      STOF(ISTOF + 27) = Tfrz
      STOF(ISTOF + 28) = Pmax
      STOF(ISTOF + 29) = Pmin
      STOF(ISTOF + 30) = Qmax
      STOF(ISTOF + 31) = Qmin
      STOF(ISTOF + 32) = Kp_lim
      STOF(ISTOF + 33) = Ti_lim
      STOF(ISTOF + 34) = RT_1
      STOF(ISTOF + 35) = RT_2
      STOF(ISTOF + 36) = RT_3
      STOF(ISTOF + 37) = RT_4
      STOF(ISTOF + 38) = RT_5
      STOF(ISTOF + 39) = RT_6
      STOF(ISTOF + 40) = Kipll_max
      STOF(ISTOF + 41) = Kipll_min
      STOF(ISTOF + 42) = RT_7
      STOF(ISTOF + 43) = RT_8
      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 44) = RT_9
      STOF(ISTOF + 45) = RT_10
      STOF(ISTOF + 46) = theta_int
      STOF(ISTOF + 47) = RT_11
      STOF(ISTOF + 48) = RT_12
      STOF(ISTOF + 49) = RT_13
      STOF(ISTOF + 50) = RT_14
      STOF(ISTOF + 51) = RT_15
      STOF(ISTOF + 52) = RT_16
      STOF(ISTOF + 55) = Vpvd
      STOF(ISTOF + 56) = Vpvq
      STOF(ISTOF + 57) = Wmin
      STOF(ISTOF + 58) = RT_18
      STOF(ISTOF + 59) = RT_19
      STOF(ISTOF + 60) = RT_20
      STOF(ISTOF + 61) = RT_21
      STOF(ISTOF + 72) = RT_27
      STOF(ISTOF + 73) = RT_28
      STOF(ISTOF + 74) = RT_29
      STOF(ISTOF + 75) = RT_30
      STOF(ISTOF + 76) = RT_31
      STOF(ISTOF + 77) = RT_32
      STOF(ISTOF + 78) = RT_33
      STOF(ISTOF + 79) = RT_34
      STOF(ISTOF + 80) = RT_35
      STOF(ISTOF + 81) = RT_36
      STOF(ISTOF + 82) = RT_37
      STOF(ISTOF + 83) = RT_38
      STOF(ISTOF + 84) = RT_39
      STOF(ISTOF + 85) = RT_40
      STOF(ISTOF + 86) = RT_41
      STOF(ISTOF + 87) = RT_42
      STOF(ISTOF + 88) = RT_43
      STOF(ISTOF + 89) = RT_44
      STOF(ISTOF + 90) = RT_45
      STOF(ISTOF + 91) = RT_46
      STOF(ISTOF + 92) = RT_47
      STOF(ISTOF + 93) = RT_48
      STOF(ISTOF + 94) = RT_49
      STOF(ISTOF + 95) = RT_50
      STOF(ISTOF + 96) = RT_51
      STOF(ISTOF + 97) = RT_52
      STOF(ISTOF + 98) = RT_53
      STOF(ISTOF + 99) = Qerr
      STOF(ISTOF + 100) = RT_54
      STOF(ISTOF + 101) = RT_55
      STOF(ISTOF + 102) = RT_56
      STOF(ISTOF + 103) = RT_57
      STOF(ISTOF + 104) = RT_58
      STOF(ISTOF + 105) = RT_59
      STOF(ISTOF + 106) = RT_60
      STOF(ISTOF + 107) = Tf
      STOF(ISTOF + 108) = Tv
      STOF(ISTOF + 109) = Kv
      STOF(ISTOF + 110) = Kf
      STOF(ISTOF + 111) = Tr
      STOF(ISTOF + 112) = RT_61
      STOF(ISTOF + 113) = RT_62
      STOF(ISTOF + 114) = RT_63
      STOF(ISTOF + 115) = Kd
      STOF(ISTOF + 116) = RT_64
      STOF(ISTOF + 117) = RT_65
      STOF(ISTOF + 118) = RT_66
      STOF(ISTOF + 119) = K1
      STOF(ISTOF + 120) = RT_67
      STOF(ISTOF + 121) = RT_68
      STOF(ISTOF + 122) = RT_69
      STOF(ISTOF + 123) = RT_70
      STOF(ISTOF + 124) = RT_71
      STOF(ISTOF + 125) = RT_72
      STOF(ISTOF + 126) = RT_73
      STOF(ISTOF + 127) = RT_74
      STOF(ISTOF + 128) = RT_75
      STOF(ISTOF + 129) = RT_76
      STOF(ISTOF + 130) = RT_77
      STOF(ISTOF + 131) = RT_78
      STOF(ISTOF + 132) = RT_79
      STOF(ISTOF + 133) = RT_80
      STOF(ISTOF + 134) = RT_81
      STOF(ISTOF + 135) = K2
      STOF(ISTOF + 136) = RT_82
      STOF(ISTOF + 137) = RT_83
      STOF(ISTOF + 138) = theta_vsm
      STOF(ISTOF + 139) = RT_84
      STOF(ISTOF + 140) = RT_85
      STOF(ISTOF + 141) = RT_86
      STOF(ISTOF + 142) = RT_87
      STOF(ISTOF + 143) = RT_88
      STOF(ISTOF + 144) = RT_89
      STOF(ISTOF + 145) = RT_90
      STOF(ISTOF + 146) = RT_91
      STOF(ISTOF + 147) = RT_92
      STOF(ISTOF + 148) = RT_93
      STOF(ISTOF + 149) = RT_94
      STOF(ISTOF + 150) = RT_95
      STOF(ISTOF + 151) = Perr
      STOF(ISTOF + 152) = RT_96
      STOF(ISTOF + 153) = RT_97
      STOF(ISTOF + 154) = RT_98
      STOF(ISTOF + 155) = RT_99
      STOF(ISTOF + 156) = RT_100
      STOF(ISTOF + 157) = RT_101
      STOF(ISTOF + 158) = RT_102
      STOF(ISTOF + 159) = RT_103
      STOF(ISTOF + 160) = RT_104
      STOF(ISTOF + 161) = RT_105
      STOI(ISTOI + 2) = IT_2
      STOF(ISTOF + 162) = RT_106
      STOF(ISTOF + 163) = RT_107
      STOF(ISTOF + 164) = RT_108
      STOF(ISTOF + 165) = RT_109
      STOF(ISTOF + 166) = RT_110
      STOF(ISTOF + 171) = RT_112
      STOI(ISTOI + 3) = lim_frz
      STOF(ISTOF + 172) = RT_113
      STOF(ISTOF + 173) = RT_114
      STOF(ISTOF + 174) = RT_115

! Array (1:2) quantities...
      DO IT_0 = 1,2
         STOF(ISTOF + 12 + IT_0) = P_Q_ref_lim(IT_0)
         STOF(ISTOF + 52 + IT_0) = RT_17(IT_0)
         STOF(ISTOF + 61 + IT_0) = RT_22(IT_0)
         STOF(ISTOF + 63 + IT_0) = RT_23(IT_0)
         STOF(ISTOF + 65 + IT_0) = RT_24(IT_0)
         STOF(ISTOF + 67 + IT_0) = RT_25(IT_0)
         STOF(ISTOF + 69 + IT_0) = RT_26(IT_0)
         STOF(ISTOF + 166 + IT_0) = P_Q_out(IT_0)
         STOF(ISTOF + 168 + IT_0) = RT_111(IT_0)
      END DO

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = Vabc(IT_0)
      END DO

! Array (1:4) quantities...
      DO IT_0 = 1,4
         STOF(ISTOF + 6 + IT_0) = P_Q_ref_meas(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------
      !freq     is output
      !theta    is output
      !Eref     is output
      !P_Q_ref_lim is output

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE EPRI_PLL_22_2_1_1_1_1Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_19, RT_29, RT_32, RT_39
      REAL     RT_42, RT_44, RT_46, RT_47, RT_57
      REAL     RT_58, RT_61, RT_63, RT_67, RT_68
      REAL     RT_73, RT_95, RT_115

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC          ! Storage Indices
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NPGB      = NPGB + 5
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_4     = STOF(ISTOF + 37)
      RT_19    = STOF(ISTOF + 59)
      RT_29    = STOF(ISTOF + 74)
      RT_32    = STOF(ISTOF + 77)
      RT_39    = STOF(ISTOF + 84)
      RT_42    = STOF(ISTOF + 87)
      RT_44    = STOF(ISTOF + 89)
      RT_46    = STOF(ISTOF + 91)
      RT_47    = STOF(ISTOF + 92)
      RT_57    = STOF(ISTOF + 103)
      RT_58    = STOF(ISTOF + 104)
      RT_61    = STOF(ISTOF + 112)
      RT_63    = STOF(ISTOF + 114)
      RT_67    = STOF(ISTOF + 120)
      RT_68    = STOF(ISTOF + 121)
      RT_73    = STOF(ISTOF + 126)
      RT_95    = STOF(ISTOF + 150)
      RT_115   = STOF(ISTOF + 174)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'EPRI_PLL_22_2_1_1_1_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 210:[const] Real Constant 

      RT_115 = 0.0

! 280:[const] Real Constant 

      RT_39 = 1.0e-05

! 300:[const] Real Constant 

      RT_47 = 0.01

! 320:[emtconst] Commonly Used Constants (pi...) 
      RT_95 = BY180_PI

! 340:[const] Real Constant 

      RT_4 = 0.0

! 350:[const] Real Constant 

      RT_19 = 0.0

! 360:[const] Real Constant 

      RT_42 = 1.0

! 460:[const] Real Constant 

      RT_44 = 1.0

! 490:[const] Real Constant 'del_w0'

      RT_32 = 0.0

! 510:[const] Real Constant 

      RT_46 = 1.0

! 530:[const] Real Constant 

      RT_58 = 1.0e-05

! 560:[const] Real Constant 

      RT_29 = 1.0e-05

! 590:[const] Real Constant 

      RT_61 = 1.0

! 600:[const] Real Constant 

      RT_63 = 0.0

! 610:[const] Real Constant 

      RT_57 = 1.0

! 650:[const] Real Constant 

      RT_67 = 1.0

! 670:[const] Real Constant 

      RT_68 = 100.0

! 730:[const] Real Constant 

      RT_73 = 1.0

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 37) = RT_4
      STOF(ISTOF + 59) = RT_19
      STOF(ISTOF + 74) = RT_29
      STOF(ISTOF + 77) = RT_32
      STOF(ISTOF + 84) = RT_39
      STOF(ISTOF + 87) = RT_42
      STOF(ISTOF + 89) = RT_44
      STOF(ISTOF + 91) = RT_46
      STOF(ISTOF + 92) = RT_47
      STOF(ISTOF + 103) = RT_57
      STOF(ISTOF + 104) = RT_58
      STOF(ISTOF + 112) = RT_61
      STOF(ISTOF + 114) = RT_63
      STOF(ISTOF + 120) = RT_67
      STOF(ISTOF + 121) = RT_68
      STOF(ISTOF + 126) = RT_73
      STOF(ISTOF + 150) = RT_95
      STOF(ISTOF + 174) = RT_115


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE EPRI_PLL_22_2_1_1_1_1Dyn_Begin(Tfrz)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Tfrz

! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_19, RT_29, RT_32, RT_39
      REAL     RT_42, RT_44, RT_46, RT_47, RT_57
      REAL     RT_58, RT_61, RT_63, RT_67, RT_68
      REAL     RT_73, RT_95, RT_115

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 120:[datatap] Scalar/Array Tap 

! 170:[datatap] Scalar/Array Tap 

! 210:[const] Real Constant 
      RT_115 = 0.0

! 250:[gain] Gain Block 

! 270:[datatap] Scalar/Array Tap 

! 280:[const] Real Constant 
      RT_39 = 1.0e-05

! 290:[datatap] Scalar/Array Tap 

! 300:[const] Real Constant 
      RT_47 = 0.01

! 310:[datatap] Scalar/Array Tap 

! 320:[emtconst] Commonly Used Constants (pi...) 
      RT_95 = BY180_PI

! 340:[const] Real Constant 
      RT_4 = 0.0

! 350:[const] Real Constant 
      RT_19 = 0.0

! 360:[const] Real Constant 
      RT_42 = 1.0

! 370:[datatap] Scalar/Array Tap 

! 380:[div] Divider 

! 400:[datatap] Scalar/Array Tap 

! 410:[time-sig] Output of Simulation Time 

! 420:[datatap] Scalar/Array Tap 

! 440:[time-sig] Output of Simulation Time 

! 450:[time-sig] Output of Simulation Time 

! 460:[const] Real Constant 
      RT_44 = 1.0

! 470:[compare] Single Input Level Comparator 

! 480:[div] Divider 

! 490:[const] Real Constant 'del_w0'
      RT_32 = 0.0

! 510:[const] Real Constant 
      RT_46 = 1.0

! 520:[div] Divider 

! 530:[const] Real Constant 
      RT_58 = 1.0e-05

! 550:[div] Divider 

! 560:[const] Real Constant 
      RT_29 = 1.0e-05

! 580:[div] Divider 

! 590:[const] Real Constant 
      RT_61 = 1.0

! 600:[const] Real Constant 
      RT_63 = 0.0

! 610:[const] Real Constant 
      RT_57 = 1.0

! 650:[const] Real Constant 
      RT_67 = 1.0

! 660:[div] Divider 

! 670:[const] Real Constant 
      RT_68 = 100.0

! 680:[time-sig] Output of Simulation Time 

! 690:[compare] Single Input Level Comparator 

! 700:[x_power_y] X to the power of Y 

! 710:[gain] Gain Block 

! 720:[square] Square 

! 730:[const] Real Constant 
      RT_73 = 1.0

! 740:[div] Divider 

! 750:[mult] Multiplier 

! 760:[inv] Interpolated Logic Inverter 

! 770:[delay] Binary ON Delay with Interpolation 

! 780:[select] Two Input Selector 
      RTCI(NRTCI) = 3
      NRTCI = NRTCI + 1

! 790:[compare] Single Input Level Comparator 

! 800:[compare] Single Input Level Comparator 

! 810:[select] Two Input Selector 
      RTCI(NRTCI) = 3
      NRTCI = NRTCI + 1

! 820:[select] Two Input Selector 
      RTCI(NRTCI) = 2
      NRTCI = NRTCI + 1

! 830:[select] Two Input Selector 
      RTCI(NRTCI) = 2
      NRTCI = NRTCI + 1

! 840:[sumjct] Summing/Differencing Junctions 

! 850:[square] Square 

! 860:[gain] Gain Block 

! 870:[realpole] Real Pole 

! 880:[datatap] Scalar/Array Tap 

! 890:[realpole] Real Pole 

! 900:[sumjct] Summing/Differencing Junctions 

! 910:[gain] Gain Block 

! 920:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 930:[datatap] Scalar/Array Tap 

! 940:[datamerge] Merges data signals into an array 

! 950:[realpole] Real Pole 

! 960:[sumjct] Summing/Differencing Junctions 

! 970:[gain] Gain Block 

! 980:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 990:[monostable] Interpolated Monostable MultiVibrator 

! 1000:[sumjct] Summing/Differencing Junctions 

! 1010:[square] Square 

! 1020:[gain] Gain Block 

! 1030:[sumjct] Summing/Differencing Junctions 

! 1040:[gain] Gain Block 

! 1050:[sumjct] Summing/Differencing Junctions 

! 1060:[datamerge] Merges data signals into an array 

! 1070:[sumjct] Summing/Differencing Junctions 

! 1080:[div] Divider 

! 1090:[div] Divider 

! 1100:[sumjct] Summing/Differencing Junctions 

! 1110:[div] Divider 

! 1120:[select] Two Input Selector 
      RTCI(NRTCI) = 3
      NRTCI = NRTCI + 1

! 1130:[abcdq0] abc dq0 transformation 

! 1140:[trans_filt] Nth Order Butterworth/Chebyshev Filter 

! 1150:[mult] Multiplier 

! 1160:[sumjct] Summing/Differencing Junctions 

! 1170:[gain] Gain Block 

! 1180:[square] Square 

! 1190:[div] Divider 

! 1200:[select] Two Input Selector 
      RTCI(NRTCI) = 3
      NRTCI = NRTCI + 1

! 1210:[realpole] Real Pole 

! 1220:[gain] Gain Block 

! 1230:[select] Two Input Selector 
      RTCI(NRTCI) = 3
      NRTCI = NRTCI + 1

! 1240:[mult] Multiplier 

! 1250:[diffpole] Differential Pole 

! 1260:[gain] Gain Block 

! 1270:[datamerge] Merges data signals into an array 

! 1280:[sumjct] Summing/Differencing Junctions 

! 1290:[sumjct] Summing/Differencing Junctions 

! 1300:[datatap] Scalar/Array Tap 

! 1310:[gain] Gain Block 

! 1320:[sandhdefn] Sample and Hold 

! 1330:[gain] Gain Block 

! 1340:[abcdq0] abc dq0 transformation 

! 1350:[ratelimit] Rate Limiter 

! 1360:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1370:[sumjct] Summing/Differencing Junctions 

! 1380:[sumjct] Summing/Differencing Junctions 

! 1390:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1400:[div] Divider 

! 1410:[gain] Gain Block 

! 1420:[sumjct] Summing/Differencing Junctions 

! 1430:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1440:[gain] Gain Block 

! 1450:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 1460:[hardlimit_66_2_1_1_1_1] Hard Limiter 

! 1470:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1480:[sumjct] Summing/Differencing Junctions 

! 1490:[div] Divider 

! 1500:[datatap] Scalar/Array Tap 

! 1510:[gain] Gain Block 

! 1520:[sumjct] Summing/Differencing Junctions 

! 1530:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1540:[sumjct] Summing/Differencing Junctions 

! 1550:[select] Two Input Selector 
      RTCI(NRTCI) = 3
      NRTCI = NRTCI + 1

! 1560:[mult] Multiplier 

! 1570:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1580:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1590:[ratelimit] Rate Limiter 

! 1600:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 1610:[gain] Gain Block 

! 1620:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1630:[sumjct] Summing/Differencing Junctions 

! 1640:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 1650:[gain] Gain Block 

! 1660:[mult] Multiplier 

! 1700:[pgb] Output Channel 'd_theta'

! 1710:[datamerge] Merges data signals into an array 

! 1720:[pgb] Output Channel 'Vdq'

! 1730:[pgb] Output Channel 'P_Q_ref_lim'

      RETURN
      END

!=======================================================================

      SUBROUTINE EPRI_PLL_22_2_1_1_1_1Out_Begin(Tfrz)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Tfrz

! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_19, RT_29, RT_32, RT_39
      REAL     RT_42, RT_44, RT_46, RT_47, RT_57
      REAL     RT_58, RT_61, RT_63, RT_67, RT_68
      REAL     RT_73, RT_95, RT_115

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 210:[const] Real Constant 
      RT_115 = 0.0

! 280:[const] Real Constant 
      RT_39 = 1.0e-05

! 300:[const] Real Constant 
      RT_47 = 0.01

! 320:[emtconst] Commonly Used Constants (pi...) 
      RT_95 = BY180_PI

! 340:[const] Real Constant 
      RT_4 = 0.0

! 350:[const] Real Constant 
      RT_19 = 0.0

! 360:[const] Real Constant 
      RT_42 = 1.0

! 460:[const] Real Constant 
      RT_44 = 1.0

! 490:[const] Real Constant 'del_w0'
      RT_32 = 0.0

! 510:[const] Real Constant 
      RT_46 = 1.0

! 530:[const] Real Constant 
      RT_58 = 1.0e-05

! 560:[const] Real Constant 
      RT_29 = 1.0e-05

! 590:[const] Real Constant 
      RT_61 = 1.0

! 600:[const] Real Constant 
      RT_63 = 0.0

! 610:[const] Real Constant 
      RT_57 = 1.0

! 650:[const] Real Constant 
      RT_67 = 1.0

! 670:[const] Real Constant 
      RT_68 = 100.0

! 730:[const] Real Constant 
      RT_73 = 1.0

      RETURN
      END

