!=======================================================================
! Generated by: PSCAD v5.0.2.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Untitled_3
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE Untitled_3Dyn()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    VM3PH2        ! 3 Phase Voltmeter
!     SUBR    SANDH2        ! Sample and Hold

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_2(3)

! Control Signals
      INTEGER  S2M, LRR, InitEx, InitGv
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5(3)
      REAL     IF, EF, RT_6, RT_7, RT_8, RT_9
      REAL     POUT, QOUT, Rang

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6, RVD1_7, RVD1_8
      REAL     RVD1_9, RVD1_10, RVD1_11, RVD1_12
      REAL     RVD1_13, RVD1_14, RVD1_15, RVD1_16
      REAL     RVD1_17, RVD1_18

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 4
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 16
      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 1)
      RT_2     = STOF(ISTOF + 2)
      RT_3     = STOF(ISTOF + 3)
      RT_4     = STOF(ISTOF + 4)
      IF       = STOF(ISTOF + 8)
      EF       = STOF(ISTOF + 9)
      RT_6     = STOF(ISTOF + 10)
      RT_7     = STOF(ISTOF + 11)
      RT_8     = STOF(ISTOF + 12)
      RT_9     = STOF(ISTOF + 13)
      S2M      = STOI(ISTOI + 1)
      LRR      = STOI(ISTOI + 2)
      InitEx   = STOI(ISTOI + 3)
      POUT     = STOF(ISTOF + 14)
      QOUT     = STOF(ISTOF + 15)
      Rang     = STOF(ISTOF + 16)
      InitGv   = STOI(ISTOI + 4)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         RT_5(IT_0) = STOF(ISTOF + 4 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_2(IT_0) = NODE(INODE + 6 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Untitled_3.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[timerdefn]  
!  Timer
      IF(TIME.GE.1.5)THEN
        LRR = 1
      ELSE
        LRR = 0
      END IF
!

! 20:[timerdefn]  
!  Timer
      IF(TIME.GE.1.0)THEN
        S2M = 1
      ELSE
        S2M = 0
      END IF
!

! 30:[sync_machine] Synchronous Machine 'HydroGener'
      CALL COMPONENT_ID(ICALL_NO,308144854)
! RVD1_1 - Speed
! RVD1_2 - Neutral Voltage
! RVD1_3 - Neutral Current
! RVD1_4 - Load Angle
! RVD1_5 - Rotor Mechanical Angle
! RVD1_6 - Real Power output
! RVD1_7 - Reactive Power output
! RVD1_8 - Mechanical Torque
! RVD1_9 - Electrical Torque
! RVD1_10:15 - Monitored STOR locations
! RVD1_16:17 - Terminal Voltage RMS,pu
! RVD1_18 - Inverse of Base MVA
! IVD1_2 - Machine is active, Initialize exciter
! IVD1_3 - Torque driven, Initialize governor/turbine
      STORI(NSTORI) = NINT(STOR(NEXC+294))
      IVD1_1 = NRTCF
      RVD1_1 = RTCF(IVD1_1+2)
      CALL SYNCMC3P2_EXE(SS,  (IBRCH+10), (IBRCH+11), (IBRCH+12), (IBRCH&
     &+13), (IBRCH+14), (IBRCH+15),0.0,0,S2M,1.0,0,LRR,RVD1_1,RT_6,0,0,1&
     &.0,0.0,376.99111,EF,0,1.0,0,IF,RVD1_2,RVD1_3,RVD1_4,RVD1_5,RT_2,RT&
     &_1,RVD1_6,RVD1_7,RVD1_8,RVD1_9,IVD1_2,IVD1_3,RVD1_10,RVD1_11,RVD1_&
     &12,RVD1_13,RVD1_14,RVD1_15)
      RT_3 = RT_6
      IF (IVD1_3 .EQ. 0) RT_3 = RVD1_8
      RT_7 = RVD1_8
      RT_4 = STOR(NEXC-375+265)*STOR(NEXC-375+302)
      IF ((IVD1_2 .EQ. 1) .AND. (STORI(NSTORI).EQ.0)) THEN
          IF (STOR(NEXC-375+293).GT.0.5) THEN
              STORF(NSTORF) = STOR(NEXC-375+161)
          ELSE
              STORF(NSTORF) = STOR(NEXC-375+296)
          ENDIF
      ENDIF
      IF (IVD1_2 .EQ. 1) THEN
        STORF(NSTORF+1) = STORF(NSTORF+1) + (RT_2-RTCF(IVD1_1+2))*DELT
        IF (IVD1_3 .EQ. 0) STORF(NSTORF+2) = RVD1_4
        STORF(NSTORF+3) = STORF(NSTORF) + STORF(NSTORF+1) + STORF(NSTORF&
     &+2)
      ELSE
        STORF(NSTORF+3) = 0.0
      ENDIF
      RVD1_16 = VM3PH2(SS,NT_2(1),NT_2(2),NT_2(3),0.02)/(SQRT_3*RTCF(IVD&
     &1_1+1))
      IF(RVD1_16 .LT. 1.0E-8) THEN
         RVD1_17 = 1.0
      ELSE
         RVD1_17 = RVD1_16
      ENDIF
      RVD1_18 = 1.0/(3.0*RTCF(IVD1_1)*RTCF(IVD1_1+1))
      RT_5(1) = RVD1_17
      IF(RVD1_16 .LT. 1.0E-8) THEN
         RT_5(2) = 0.0
         RT_5(3) = 0.0
      ELSE
         RT_5(2) = RVD1_6*RVD1_18/RVD1_17
         RT_5(3) = -RVD1_7*RVD1_18/RVD1_17
      ENDIF
      RT_2 = RT_2/RTCF(IVD1_1+2)
      POUT = RVD1_6/(3.0*RTCF(IVD1_1)*RTCF(IVD1_1+1))
      QOUT = RVD1_7/(3.0*RTCF(IVD1_1)*RTCF(IVD1_1+1))
      Rang = RVD1_5
      InitGv = IVD1_3
      InitEx = IVD1_2
      NSTORF = NSTORF + 4
      NSTORI = NSTORI + 1

! 40:[sandhdefn] Sample and Hold 
!  Sample and Hold
      CALL SANDH2(RT_8,S2M,  1,  RT_9)

! 50:[excac_2016] Type AC Exciter IEEE Std. 421.5-2016 
      CALL COMPONENT_ID(ICALL_NO,1786715130)
! AC Exciter Model AC1C
      CALL EXCAC1C1_EXE(RT_9,RT_5,0.0,IF,RT_4,InitEx,EF,0.0,-1.0E10,0.0,&
     &+1.0E10,0.0,-1.0E10,1.0E10)
      RT_8 = STORF(THIS+3)

! 60:[sandhdefn] Sample and Hold 
!  Sample and Hold
      CALL SANDH2(RT_7,LRR,  1,  RT_6)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T1'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH+7), (IBRCH+8), (IBRCH+9),SS,1.0,0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = RT_1
      STOF(ISTOF + 2) = RT_2
      STOF(ISTOF + 3) = RT_3
      STOF(ISTOF + 4) = RT_4
      STOF(ISTOF + 8) = IF
      STOF(ISTOF + 9) = EF
      STOF(ISTOF + 10) = RT_6
      STOF(ISTOF + 11) = RT_7
      STOF(ISTOF + 12) = RT_8
      STOF(ISTOF + 13) = RT_9
      STOI(ISTOI + 1) = S2M
      STOI(ISTOI + 2) = LRR
      STOI(ISTOI + 3) = InitEx
      STOF(ISTOF + 14) = POUT
      STOF(ISTOF + 15) = QOUT
      STOF(ISTOF + 16) = Rang
      STOI(ISTOI + 4) = InitGv

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 4 + IT_0) = RT_5(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Untitled_3Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------



!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Untitled_3.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------



!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Untitled_3Dyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6, RVD10_1(10)
      REAL     RVD10_2(10)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[timerdefn]  

! 20:[timerdefn]  

! 30:[sync_machine] Synchronous Machine 'HydroGener'
      CALL COMPONENT_ID(ICALL_NO,308144854)
      RVD10_1 = 0.0
      RVD10_2 = 0.0
      RVD10_1(2) = 1.0
      RVD10_2(2) = SQRT_2/(1.014-0.163*1.0)
      RVD10_1(3) = -1.0
      CALL SYNCMC3P0_CFG(1,0,1,376.99111,0.0051716, 0.163,1.0,1.014,0.28&
     &,0.314,1.0E-6, 0.77,0.375,0.228,RVD1_1,RVD1_2,RVD1_3)
      RVD1_6 = ONE_3RD*1000.0/19.05
      CALL SYNCMC3P2_CFG(1,1,0,1,1,1,1,1,1,RVD1_6,19.05,376.99111,10000.&
     &0,0.0,3.0,0.0,300.0,RVD1_1,RVD1_2,1.014,0.28, 0.039,0.314,6.55,1.0&
     &E6,1.0E6, 0.77,0.375,0.071, 1.0E6,1.0E6, RVD10_1,RVD10_2, 1.02,0.0&
     &,0.0,0.0,0.0, 0.1,100.0,0.2,1.02,0.0,20.0,10.0)

! 40:[sandhdefn] Sample and Hold 

! 50:[excac_2016] Type AC Exciter IEEE Std. 421.5-2016 
      CALL COMPONENT_ID(ICALL_NO,1786715130)
      CALL EXCAC1C1_CFG(0.0,0.0,400.0,0.02,14.5,-14.5,6.03,-5.43,99.0,0.&
     &0,0.1,4.18,0.03,3.14,0.8,1.0,0.38,0.2,0.03,1.0,0.0,0.0,0.0)

! 60:[sandhdefn] Sample and Hold 

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,1001557054)
      CALL PI3_SECTION_CFG(3,1,0, 33.0,100.0,60.0,1000.0,3.36786e-08,5.9&
     &3346e-07,1.933869e-08,5.58072e-07,1.96578e-06,1.277271e-08,RVD1_1,&
     &RVD1_2,RVD1_3,RVD1_4,RVD1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH+16),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+17),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+18),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+19),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+20),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+21),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+22),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+23),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+24),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+25),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+26),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+27),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 1),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T1'
      CALL COMPONENT_ID(ICALL_NO,1191510029)
      RVD1_1 = ONE_3RD*100.0
      RVD1_2 = 33.0
      RVD1_3 = 120.0*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 2),0,RVD1_1,60.0,0.08,0.0,RVD1_2,RVD1_3,1&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 3),0,RVD1_1,60.0,0.08,0.0,RVD1_2,RVD1_3,1&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 4),0,RVD1_1,60.0,0.08,0.0,RVD1_2,RVD1_3,1&
     &.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(100.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH+1),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+2),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+3),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+4),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+5),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+6),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH+7), (IBRCH+8), (IBRCH+9),SS,RVD1_1,RVD1_3,0&
     &.2,1.17,60.0,0.0,1.0,0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE Untitled_3Out_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


      RETURN
      END

