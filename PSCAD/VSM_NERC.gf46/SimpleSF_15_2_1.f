!=======================================================================
! Generated by: PSCAD v5.0.2.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : SimpleSF_15_2_1
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE SimpleSF_15_2_1Dyn(Ppu, Qpu, DBLK1, Vpu, Scale,        &
     &   System_Freq, Sbase, MV_Vbase, INV_Vbase, Vdc_Base, Lpu,        &
     &   PQflag, Pmax, Pmin, Qmax, Qmin, Kp_lim, Ki_lim, MPPT_Vdc,      &
     &   wtype, Kp_PLL, Ki_PLL, Kp_P, Ki_P, Fdrp, Qflag, Vflag, Kp_Q,   &
     &   Ki_Q, DVS_dbd, DVS_gain, Kp_V, Ki_V, Kp_Vd, Ki_Vd, Vdrp,       &
     &   Kp_rocof, Ti_rocof, Kpd, Kid, Kpq, Kiq, Imax, Vdip, Vup,       &
     &   T_frz, Kp_Vdc, Ki_Vdc, d_VSM, m_VSM)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    MPPT_PO1_EXE  ! Maximum power point tracking perturb/observe
!     SUBR    Control_12_2_1_1_1_1Dyn  ! 
!     SUBR    TRDQO         ! DQ0 transformation
!     SUBR    PI_AntiWindUp_50_2_1Dyn  ! 
!     SUBR    FILN15        ! Nth-order Butterworth/Chebyshev Filter
      REAL    LIMIT         ! Hard Limiter
!     SUBR    EMTDC_IGFP    ! Interpolated GTO Firing Pulses

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: DBLK1, Scale
      INTEGER, INTENT(IN)  :: PQflag, MPPT_Vdc
      INTEGER, INTENT(IN)  :: wtype
      REAL,    INTENT(IN)  :: Ppu, Qpu, Vpu
      REAL,    INTENT(IN)  :: System_Freq, Sbase
      REAL,    INTENT(IN)  :: MV_Vbase, INV_Vbase
      REAL,    INTENT(IN)  :: Vdc_Base, Lpu, Pmax
      REAL,    INTENT(IN)  :: Pmin, Qmax, Qmin
      REAL,    INTENT(IN)  :: Kp_lim, Ki_lim
      REAL,    INTENT(IN)  :: Kp_PLL, Ki_PLL
      REAL,    INTENT(IN)  :: Kp_P, Ki_P, Fdrp
      REAL,    INTENT(IN)  :: Qflag, Vflag, Kp_Q
      REAL,    INTENT(IN)  :: Ki_Q, DVS_dbd
      REAL,    INTENT(IN)  :: DVS_gain, Kp_V
      REAL,    INTENT(IN)  :: Ki_V, Kp_Vd, Ki_Vd
      REAL,    INTENT(IN)  :: Vdrp, Kp_rocof
      REAL,    INTENT(IN)  :: Ti_rocof, Kpd, Kid
      REAL,    INTENT(IN)  :: Kpq, Kiq, Imax
      REAL,    INTENT(IN)  :: Vdip, Vup, T_frz
      REAL,    INTENT(IN)  :: Kp_Vdc, Ki_Vdc
      REAL,    INTENT(IN)  :: d_VSM, m_VSM

! Electrical Node Indices
      INTEGER  NT_14(3), NT_15(3)

! Control Signals
      INTEGER  IT_1, IT_2, IT_3, IT_4, IT_5, IT_6
      INTEGER  IT_7, IT_8, RST, IT_9, DBLK, IT_10
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5, RT_6
      REAL     RT_7, RT_8, RT_9, Igrid(3)
      REAL     Vgrid(3), RT_10(2), freq_control
      REAL     phi, RT_11(3), INV_Vbase_LNpk
      REAL     RT_12, RT_13, INV_Ibase, RT_14
      REAL     RT_15, RT_16, RT_17, RT_18
      REAL     INV_Sbase, RT_19(3), RT_20, Cdamp
      REAL     RT_21, Ldamp, Lfilter, RT_22
      REAL     RT_23, RT_24, RT_25, RT_26, RT_27
      REAL     RT_28, INV_Lbase, RT_29, Ia_C
      REAL     Ib_C, Ic_C, RT_30, RT_31, RT_32
      REAL     Ea, Eb, Ec, RT_33, RT_34, RT_35
      REAL     RT_36, RT_37, RT_38, iq, id, vq
      REAL     vd, RT_39, RT_40, RT_41, RT_42
      REAL     GG1(2), RT_43, Crr, RT_44, GG6(2)
      REAL     GG2(2), GG3(2), GG4(2), GG5(2)
      REAL     RT_45, RT_46, vd1, vq1, RT_47
      REAL     RT_48, RT_49, Ref_b, RT_50, RT_51
      REAL     Ref_c, RT_52, Fcr, RT_53, RT_54
      REAL     RT_55, RT_56, carr, GBoost(2)
      REAL     RT_57, RT_58, P_dc, Ref_Boost
      REAL     I_dc, VrefMPPT, P_MPPT, P_Max
      REAL     P_Min, Voc, P_PV, Vpv, Ipv, RT_59
      REAL     RT_60, INIT, Vrms, V_dc, Q, P
      REAL     RT_61, Ti_Vdc, Tiq, RT_62, RT_63
      REAL     Tid, Ti_Q, RT_64, RT_65, Ti_P
      REAL     RT_66(3), IL1(3), INV_Ibase_pk
      REAL     RT_67, RT_68, RT_69, RT_70, RT_71
      REAL     RT_72, iq_L1, id_L1, Rdamp_pu
      REAL     Rdamp, RT_73, Wbase, INV_Zbase
      REAL     Cfilter_pu, RT_74, RT_75, Cfilter
      REAL     RT_76, Ti_PLL, Ti_V, RT_77, Ti_Vd
      REAL     RT_78, RT_79(2), RT_80(2)
      REAL     RT_81(2), RT_82(2), RT_83(2)
      REAL     RT_84(2), RT_85, RT_86, RT_87
      REAL     Ti_lim, Ref_a, iqref, idref, E1(3)
      REAL     I_C(3), VL

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     Hma_n_1, Hmb_n_1, Hmc_n_1, Hka_n_1
      REAL     Hkb_n_1, Hkc_n_1, Hma_n, Hmb_n
      REAL     Hmc_n, Hka_n, Hkb_n, Hkc_n, Yc
      REAL     Ycm

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ICX, IPGB                           ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 17
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 238
      IPGB      = NPGB
      NPGB      = NPGB + 35
      ICX       = NCX
      NCX       = NCX + 2
      INODE     = NNODE + 2
      NNODE     = NNODE + 49
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 72
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 46)
      RT_2     = STOF(ISTOF + 47)
      IT_1     = STOI(ISTOI + 6)
      IT_2     = STOI(ISTOI + 7)
      RT_3     = STOF(ISTOF + 48)
      RT_4     = STOF(ISTOF + 49)
      IT_3     = STOI(ISTOI + 8)
      IT_4     = STOI(ISTOI + 9)
      RT_5     = STOF(ISTOF + 50)
      IT_5     = STOI(ISTOI + 10)
      IT_6     = STOI(ISTOI + 11)
      RT_6     = STOF(ISTOF + 51)
      RT_7     = STOF(ISTOF + 52)
      IT_7     = STOI(ISTOI + 12)
      RT_8     = STOF(ISTOF + 53)
      RT_9     = STOF(ISTOF + 54)
      IT_8     = STOI(ISTOI + 13)
      RST      = STOI(ISTOI + 14)
      freq_control = STOF(ISTOF + 63)
      phi      = STOF(ISTOF + 64)
      INV_Vbase_LNpk = STOF(ISTOF + 68)
      RT_12    = STOF(ISTOF + 69)
      RT_13    = STOF(ISTOF + 70)
      INV_Ibase = STOF(ISTOF + 71)
      RT_14    = STOF(ISTOF + 72)
      RT_15    = STOF(ISTOF + 73)
      RT_16    = STOF(ISTOF + 74)
      RT_17    = STOF(ISTOF + 75)
      RT_18    = STOF(ISTOF + 76)
      INV_Sbase = STOF(ISTOF + 77)
      RT_20    = STOF(ISTOF + 81)
      Cdamp    = STOF(ISTOF + 82)
      RT_21    = STOF(ISTOF + 83)
      Ldamp    = STOF(ISTOF + 84)
      Lfilter  = STOF(ISTOF + 85)
      RT_22    = STOF(ISTOF + 86)
      RT_23    = STOF(ISTOF + 87)
      RT_24    = STOF(ISTOF + 88)
      RT_25    = STOF(ISTOF + 89)
      RT_26    = STOF(ISTOF + 90)
      RT_27    = STOF(ISTOF + 91)
      RT_28    = STOF(ISTOF + 92)
      INV_Lbase = STOF(ISTOF + 93)
      RT_29    = STOF(ISTOF + 94)
      Ia_C     = STOF(ISTOF + 95)
      Ib_C     = STOF(ISTOF + 96)
      Ic_C     = STOF(ISTOF + 97)
      RT_30    = STOF(ISTOF + 98)
      RT_31    = STOF(ISTOF + 99)
      RT_32    = STOF(ISTOF + 100)
      Ea       = STOF(ISTOF + 101)
      Eb       = STOF(ISTOF + 102)
      Ec       = STOF(ISTOF + 103)
      RT_33    = STOF(ISTOF + 104)
      RT_34    = STOF(ISTOF + 105)
      RT_35    = STOF(ISTOF + 106)
      RT_36    = STOF(ISTOF + 107)
      RT_37    = STOF(ISTOF + 108)
      RT_38    = STOF(ISTOF + 109)
      iq       = STOF(ISTOF + 110)
      id       = STOF(ISTOF + 111)
      vq       = STOF(ISTOF + 112)
      vd       = STOF(ISTOF + 113)
      RT_39    = STOF(ISTOF + 114)
      RT_40    = STOF(ISTOF + 115)
      RT_41    = STOF(ISTOF + 116)
      RT_42    = STOF(ISTOF + 117)
      RT_43    = STOF(ISTOF + 120)
      Crr      = STOF(ISTOF + 121)
      RT_44    = STOF(ISTOF + 122)
      RT_45    = STOF(ISTOF + 133)
      RT_46    = STOF(ISTOF + 134)
      vd1      = STOF(ISTOF + 135)
      vq1      = STOF(ISTOF + 136)
      RT_47    = STOF(ISTOF + 137)
      RT_48    = STOF(ISTOF + 138)
      RT_49    = STOF(ISTOF + 139)
      Ref_b    = STOF(ISTOF + 140)
      RT_50    = STOF(ISTOF + 141)
      RT_51    = STOF(ISTOF + 142)
      Ref_c    = STOF(ISTOF + 143)
      RT_52    = STOF(ISTOF + 144)
      Fcr      = STOF(ISTOF + 145)
      RT_53    = STOF(ISTOF + 146)
      RT_54    = STOF(ISTOF + 147)
      RT_55    = STOF(ISTOF + 148)
      RT_56    = STOF(ISTOF + 149)
      carr     = STOF(ISTOF + 150)
      RT_57    = STOF(ISTOF + 153)
      RT_58    = STOF(ISTOF + 154)
      P_dc     = STOF(ISTOF + 155)
      Ref_Boost = STOF(ISTOF + 156)
      I_dc     = STOF(ISTOF + 157)
      VrefMPPT = STOF(ISTOF + 158)
      P_MPPT   = STOF(ISTOF + 159)
      P_Max    = STOF(ISTOF + 160)
      P_Min    = STOF(ISTOF + 161)
      Voc      = STOF(ISTOF + 162)
      P_PV     = STOF(ISTOF + 163)
      Vpv      = STOF(ISTOF + 164)
      Ipv      = STOF(ISTOF + 165)
      RT_59    = STOF(ISTOF + 166)
      IT_9     = STOI(ISTOI + 15)
      RT_60    = STOF(ISTOF + 167)
      DBLK     = STOI(ISTOI + 16)
      IT_10    = STOI(ISTOI + 17)
      INIT     = STOF(ISTOF + 168)
      Vrms     = STOF(ISTOF + 169)
      V_dc     = STOF(ISTOF + 170)
      Q        = STOF(ISTOF + 171)
      P        = STOF(ISTOF + 172)
      RT_61    = STOF(ISTOF + 173)
      Ti_Vdc   = STOF(ISTOF + 174)
      Tiq      = STOF(ISTOF + 175)
      RT_62    = STOF(ISTOF + 176)
      RT_63    = STOF(ISTOF + 177)
      Tid      = STOF(ISTOF + 178)
      Ti_Q     = STOF(ISTOF + 179)
      RT_64    = STOF(ISTOF + 180)
      RT_65    = STOF(ISTOF + 181)
      Ti_P     = STOF(ISTOF + 182)
      INV_Ibase_pk = STOF(ISTOF + 189)
      RT_67    = STOF(ISTOF + 190)
      RT_68    = STOF(ISTOF + 191)
      RT_69    = STOF(ISTOF + 192)
      RT_70    = STOF(ISTOF + 193)
      RT_71    = STOF(ISTOF + 194)
      RT_72    = STOF(ISTOF + 195)
      iq_L1    = STOF(ISTOF + 196)
      id_L1    = STOF(ISTOF + 197)
      Rdamp_pu = STOF(ISTOF + 198)
      Rdamp    = STOF(ISTOF + 199)
      RT_73    = STOF(ISTOF + 200)
      Wbase    = STOF(ISTOF + 201)
      INV_Zbase = STOF(ISTOF + 202)
      Cfilter_pu = STOF(ISTOF + 203)
      RT_74    = STOF(ISTOF + 204)
      RT_75    = STOF(ISTOF + 205)
      Cfilter  = STOF(ISTOF + 206)
      RT_76    = STOF(ISTOF + 207)
      Ti_PLL   = STOF(ISTOF + 208)
      Ti_V     = STOF(ISTOF + 209)
      RT_77    = STOF(ISTOF + 210)
      Ti_Vd    = STOF(ISTOF + 211)
      RT_78    = STOF(ISTOF + 212)
      RT_85    = STOF(ISTOF + 225)
      RT_86    = STOF(ISTOF + 226)
      RT_87    = STOF(ISTOF + 227)
      Ti_lim   = STOF(ISTOF + 228)
      Ref_a    = STOF(ISTOF + 229)
      iqref    = STOF(ISTOF + 230)
      idref    = STOF(ISTOF + 231)
      VL       = STOF(ISTOF + 238)

! Array (1:2) quantities...
      DO IT_0 = 1,2
         RT_10(IT_0) = STOF(ISTOF + 60 + IT_0)
         GG1(IT_0) = STOF(ISTOF + 117 + IT_0)
         GG6(IT_0) = STOF(ISTOF + 122 + IT_0)
         GG2(IT_0) = STOF(ISTOF + 124 + IT_0)
         GG3(IT_0) = STOF(ISTOF + 126 + IT_0)
         GG4(IT_0) = STOF(ISTOF + 128 + IT_0)
         GG5(IT_0) = STOF(ISTOF + 130 + IT_0)
         GBoost(IT_0) = STOF(ISTOF + 150 + IT_0)
         RT_79(IT_0) = STOF(ISTOF + 212 + IT_0)
         RT_80(IT_0) = STOF(ISTOF + 214 + IT_0)
         RT_81(IT_0) = STOF(ISTOF + 216 + IT_0)
         RT_82(IT_0) = STOF(ISTOF + 218 + IT_0)
         RT_83(IT_0) = STOF(ISTOF + 220 + IT_0)
         RT_84(IT_0) = STOF(ISTOF + 222 + IT_0)
      END DO

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Igrid(IT_0) = STOF(ISTOF + 54 + IT_0)
         Vgrid(IT_0) = STOF(ISTOF + 57 + IT_0)
         RT_11(IT_0) = STOF(ISTOF + 64 + IT_0)
         RT_19(IT_0) = STOF(ISTOF + 77 + IT_0)
         RT_66(IT_0) = STOF(ISTOF + 182 + IT_0)
         IL1(IT_0) = STOF(ISTOF + 185 + IT_0)
         E1(IT_0) = STOF(ISTOF + 231 + IT_0)
         I_C(IT_0) = STOF(ISTOF + 234 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_14(IT_0) = NODE(INODE + 25 + IT_0)
         NT_15(IT_0) = NODE(INODE + 28 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'SimpleSF_15_2_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 100:[var] Variable Input Slider 'Irradiation'
      RT_53 = CX(CXMAP(ICX+1))

! 110:[var] Variable Input Slider 'Temperature'
      RT_55 = CX(CXMAP(ICX+2))

! 140:[const] Real Constant 
      RT_65 = 1.0

! 160:[const] Real Constant 
      RT_64 = 1.0

! 180:[const] Real Constant 
      RT_63 = 1.0

! 210:[const] Real Constant 
      RT_62 = 1.0

! 230:[const] Real Constant 
      RT_61 = 1.0

! 290:[const] Real Constant 
      RT_76 = 1.0

! 320:[const] Real Constant 
      RT_77 = 1.0

! 350:[const] Real Constant 
      RT_78 = 1.0

! 640:[const] Real Constant 
      RT_87 = 1.0

! 700:[emtconst] Commonly Used Constants (pi...) 
      RT_52 = BY180_PI

! 710:[sumjct] Summing/Differencing Junctions 
      RT_1 = + Vdc_Base - V_dc

! 720:[unity] Type/Shape conversion block 
! real -> real
      INV_Sbase = Sbase

! 730:[const] Real Constant 
      RT_51 = 0.0

! 740:[consti] Integer Constant 
      IT_1 = 0

! 750:[const] Real Constant 
      RT_57 = 5000.0

! 760:[sig_gen] Variable Frequency Sawtooth Generator 
      CALL SAWTOOTH1_EXE(RT_57,carr)
!

! 770:[pgb] Output Channel 'Vdc_Base'

      PGB(IPGB+1) = Vdc_Base

! 780:[emtconst] Commonly Used Constants (pi...) 
      RT_17 = SQRT_2

! 790:[const] Real Constant 'mf'
      RT_43 = 70.0

! 800:[unity] Type/Shape conversion block 
! real -> real
      P_Max = Sbase

! 810:[emtconst] Commonly Used Constants (pi...) 
      RT_13 = SQRT_3

! 830:[const] Real Constant 
      P_Min = 0.0

! 840:[mult] Multiplier 
      Fcr = System_Freq * RT_43

! 850:[sig_gen] Variable Frequency Sawtooth Generator 
      CALL SAWTOOTH1_EXE(Fcr,Crr)
!

! 860:[pgb] Output Channel 'Carrier'

      PGB(IPGB+3) = Crr

! 870:[pgb] Output Channel 'Ppu'

      PGB(IPGB+4) = Ppu

! 880:[emtconst] Commonly Used Constants (pi...) 
      RT_14 = SQRT_2

! 890:[emtconst] Commonly Used Constants (pi...) 
      RT_16 = SQRT_1BY3

! 900:[mppt] Maximum power point tracker for photovoltaic source 
      CALL MPPT_PO1_EXE(Vpv,Ipv,VrefMPPT)

! 910:[square] Square 
      RT_18 = INV_Vbase * INV_Vbase

! 920:[pgb] Output Channel 'Qpu'

      PGB(IPGB+5) = Qpu

! 930:[div] Divider 
      IF (ABS(INV_Sbase) .LT. 1.0E-100) THEN
         IF (INV_Sbase .LT. 0.0)  THEN
            INV_Zbase = -1.0E100 * RT_18
         ELSE
            INV_Zbase =  1.0E100 * RT_18
         ENDIF
      ELSE
         INV_Zbase = RT_18 / INV_Sbase
      ENDIF

! 940:[sumjct] Summing/Differencing Junctions 
      RT_5 = - VrefMPPT + Vpv

! 950:[const] Real Constant 'kV'
      Voc = 1.015

! 970:[consti] Integer Constant 
      IT_5 = 0

! 980:[consti] Integer Constant 
      IT_3 = 0

! 990:[emtconst] Commonly Used Constants (pi...) 
      RT_29 = TWO_PI

! 1000:[gain] Gain Block 
!  Gain
      Wbase = System_Freq * RT_29

! 1050:[mult] Multiplier 
      RT_73 = Wbase * INV_Zbase

! 1060:[gain] Gain Block 
!  Gain
      RT_26 = 0.4 * Fcr

! 1070:[const] Real Constant 
      RT_75 = 1000000.0

! 1090:[const] Real Constant 
      RT_27 = 1000000.0

! 1100:[emtconst] Commonly Used Constants (pi...) 
      RT_25 = TWO_PI

! 1110:[mult] Multiplier 
      RT_24 = RT_25 * RT_26

! 1130:[square] Square 
      RT_23 = RT_24 * RT_24

! 1160:[pgb] Output Channel 'VrefMPPT'

      PGB(IPGB+12) = VrefMPPT

! 1170:[consti] Integer Constant 
      IT_7 = 0

! 1180:[consti] Integer Constant 
      IT_8 = 0

! 1200:[ratelimit] Rate Limiter 
!  C/s
      CALL RATE_LIMITER(500.0,500.0,RT_53,RT_54)

! 1210:[div] Divider 
      IF (ABS(Ki_P) .LT. 1.0E-100) THEN
         IF (Ki_P .LT. 0.0)  THEN
            Ti_P = -1.0E100 * RT_65
         ELSE
            Ti_P =  1.0E100 * RT_65
         ENDIF
      ELSE
         Ti_P = RT_65 / Ki_P
      ENDIF

! 1220:[div] Divider 
      IF (ABS(Ki_Q) .LT. 1.0E-100) THEN
         IF (Ki_Q .LT. 0.0)  THEN
            Ti_Q = -1.0E100 * RT_64
         ELSE
            Ti_Q =  1.0E100 * RT_64
         ENDIF
      ELSE
         Ti_Q = RT_64 / Ki_Q
      ENDIF

! 1230:[div] Divider 
      IF (ABS(Kid) .LT. 1.0E-100) THEN
         IF (Kid .LT. 0.0)  THEN
            Tid = -1.0E100 * RT_63
         ELSE
            Tid =  1.0E100 * RT_63
         ENDIF
      ELSE
         Tid = RT_63 / Kid
      ENDIF

! 1240:[div] Divider 
      IF (ABS(Kiq) .LT. 1.0E-100) THEN
         IF (Kiq .LT. 0.0)  THEN
            Tiq = -1.0E100 * RT_62
         ELSE
            Tiq =  1.0E100 * RT_62
         ENDIF
      ELSE
         Tiq = RT_62 / Kiq
      ENDIF

! 1250:[div] Divider 
      IF (ABS(Ki_PLL) .LT. 1.0E-100) THEN
         IF (Ki_PLL .LT. 0.0)  THEN
            Ti_PLL = -1.0E100 * RT_76
         ELSE
            Ti_PLL =  1.0E100 * RT_76
         ENDIF
      ELSE
         Ti_PLL = RT_76 / Ki_PLL
      ENDIF

! 1260:[div] Divider 
      IF (ABS(Ki_V) .LT. 1.0E-100) THEN
         IF (Ki_V .LT. 0.0)  THEN
            Ti_V = -1.0E100 * RT_77
         ELSE
            Ti_V =  1.0E100 * RT_77
         ENDIF
      ELSE
         Ti_V = RT_77 / Ki_V
      ENDIF

! 1270:[div] Divider 
      IF (ABS(Ki_Vd) .LT. 1.0E-100) THEN
         IF (Ki_Vd .LT. 0.0)  THEN
            Ti_Vd = -1.0E100 * RT_78
         ELSE
            Ti_Vd =  1.0E100 * RT_78
         ENDIF
      ELSE
         Ti_Vd = RT_78 / Ki_Vd
      ENDIF

! 1310:[gain] Gain Block 
!  
      RT_42 = 0.5 * Vdc_Base

! 1320:[div] Divider 
      IF (ABS(Ki_lim) .LT. 1.0E-100) THEN
         IF (Ki_lim .LT. 0.0)  THEN
            Ti_lim = -1.0E100 * RT_87
         ELSE
            Ti_lim =  1.0E100 * RT_87
         ENDIF
      ELSE
         Ti_lim = RT_87 / Ki_lim
      ENDIF

! 1330:[mult] Multiplier 
      RT_12 = INV_Vbase * RT_13

! 1340:[mult] Multiplier 
      RT_15 = INV_Vbase * RT_14

! 1350:[mult] Multiplier 
      INV_Vbase_LNpk = RT_15 * RT_16

! 1360:[div] Divider 
      IF (ABS(Wbase) .LT. 1.0E-100) THEN
         IF (Wbase .LT. 0.0)  THEN
            INV_Lbase = -1.0E100 * INV_Zbase
         ELSE
            INV_Lbase =  1.0E100 * INV_Zbase
         ENDIF
      ELSE
         INV_Lbase = INV_Zbase / Wbase
      ENDIF

! 1370:[gain] Gain Block 
!  Gain
      RT_28 = Lpu * INV_Lbase

! 1380:[gain] Gain Block 
!  Gain
      Lfilter = 0.5 * RT_28

! 1390:[gain] Gain Block 
!  Gain
      Ldamp = 5.0 * Lfilter

! 1400:[div] Divider 
      IF (ABS(INV_Vbase_LNpk) .LT. 1.0E-100) THEN
         IF (INV_Vbase_LNpk .LT. 0.0)  THEN
            RT_11 = -1.0E100 * Vgrid
         ELSE
            RT_11 =  1.0E100 * Vgrid
         ENDIF
      ELSE
         RT_11 = Vgrid / INV_Vbase_LNpk
      ENDIF

! 1410:[datatap] Scalar/Array Tap 
      Ea = RT_11(1)

! 1420:[datatap] Scalar/Array Tap 
      Eb = RT_11(2)

! 1430:[datatap] Scalar/Array Tap 
      Ec = RT_11(3)

! 1440:[div] Divider 
      IF (ABS(RT_12) .LT. 1.0E-100) THEN
         IF (RT_12 .LT. 0.0)  THEN
            INV_Ibase = -1.0E100 * INV_Sbase
         ELSE
            INV_Ibase =  1.0E100 * INV_Sbase
         ENDIF
      ELSE
         INV_Ibase = INV_Sbase / RT_12
      ENDIF

! 1450:[mult] Multiplier 
      INV_Ibase_pk = INV_Ibase * RT_17

! 1460:[mult] Multiplier 
      RT_22 = RT_23 * Lfilter

! 1470:[div] Divider 
      IF (ABS(INV_Ibase_pk) .LT. 1.0E-100) THEN
         IF (INV_Ibase_pk .LT. 0.0)  THEN
            RT_19 = -1.0E100 * Igrid
         ELSE
            RT_19 =  1.0E100 * Igrid
         ENDIF
      ELSE
         RT_19 = Igrid / INV_Ibase_pk
      ENDIF

! 1480:[datatap] Scalar/Array Tap 
      Ia_C = RT_19(1)

! 1490:[datatap] Scalar/Array Tap 
      Ib_C = RT_19(2)

! 1500:[datatap] Scalar/Array Tap 
      Ic_C = RT_19(3)

! 1510:[div] Divider 
      IF (ABS(INV_Ibase_pk) .LT. 1.0E-100) THEN
         IF (INV_Ibase_pk .LT. 0.0)  THEN
            RT_66 = -1.0E100 * IL1
         ELSE
            RT_66 =  1.0E100 * IL1
         ENDIF
      ELSE
         RT_66 = IL1 / INV_Ibase_pk
      ENDIF

! 1520:[datatap] Scalar/Array Tap 
      RT_67 = RT_66(1)

! 1530:[datatap] Scalar/Array Tap 
      RT_68 = RT_66(2)

! 1540:[datatap] Scalar/Array Tap 
      RT_69 = RT_66(3)

! 1550:[div] Divider 
      IF (ABS(RT_22) .LT. 1.0E-100) THEN
         IF (RT_22 .LT. 0.0)  THEN
            Cfilter = -1.0E100 * RT_27
         ELSE
            Cfilter =  1.0E100 * RT_27
         ENDIF
      ELSE
         Cfilter = RT_27 / RT_22
      ENDIF

! 1560:[gain] Gain Block 
!  Gain
      Cdamp = 0.5 * Cfilter

! 1570:[gain] Gain Block 
!  Gain
      RT_20 = 1.0e-06 * Cdamp

! 1580:[mult] Multiplier 
      RT_74 = RT_73 * Cfilter

! 1590:[div] Divider 
      IF (ABS(RT_75) .LT. 1.0E-100) THEN
         IF (RT_75 .LT. 0.0)  THEN
            Cfilter_pu = -1.0E100 * RT_74
         ELSE
            Cfilter_pu =  1.0E100 * RT_74
         ENDIF
      ELSE
         Cfilter_pu = RT_74 / RT_75
      ENDIF

! 1600:[Control_12_2_1_1_1_1]  'Control_12_2_1_1'
      CALL Control_12_2_1_1_1_1Dyn(Igrid, Vgrid, RT_10, freq_control, ph&
     &i, Qpu, Vpu, Ppu, INV_Vbase_LNpk, INV_Ibase, Imax, Pmax, Pmin, Qma&
     &x, Qmin, Kp_lim, Ti_lim, Wbase, REAL(wtype), Kp_PLL, Ti_PLL, Kp_P,&
     & Ti_P, Fdrp, Kp_V, Ti_V, 0.0, 0.0, Kp_Q, Ti_Q, DVS_dbd, DVS_gain, &
     &Vdrp, Kp_rocof, Ti_rocof, Qflag, Vflag, REAL(PQflag), Vdip, Vup, T&
     &_frz, 10.0, 0.01, 0.01, 0.001, Kp_Vd, Ti_Vd, d_VSM, m_VSM, Cfilter&
     &_pu, 0.001)


! 1610:[datatap] Scalar/Array Tap 
      idref = RT_10(1)

! 1620:[datatap] Scalar/Array Tap 
      iqref = RT_10(2)

! 1630:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(Ea,Eb,Ec,RT_33,RT_34,RT_35,phi,1)
      RT_34 = -RT_34

! 1640:[datamerge] Merges data signals into an array 
      RT_79(1) = RT_33
      RT_79(2) = RT_34

! 1650:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(RT_67,RT_68,RT_69,RT_70,RT_71,RT_72,phi,1)
      RT_71 = -RT_71

! 1660:[datamerge] Merges data signals into an array 
      RT_80(1) = RT_70
      RT_80(2) = RT_71

! 1670:[gain] Gain Block 
!  
      RT_82 = 1.0 * RT_79

! 1680:[gain] Gain Block 
!  
      RT_84 = 1.0 * RT_80

! 1690:[datatap] Scalar/Array Tap 
      RT_85 = RT_82(2)

! 1700:[datatap] Scalar/Array Tap 
      id_L1 = RT_84(1)

! 1710:[datatap] Scalar/Array Tap 
      iq_L1 = RT_84(2)

! 1720:[maxmin] Maximum/Minimum Functions 
      INIT = AMAX1(REAL(IT_10),INIT)
!

! 1730:[mult] Multiplier 
      RT_60 = REAL(DBLK1) * INIT

! 1740:[unity] Type/Shape conversion block 
! real -> nearest integer
      DBLK = NINT(RT_60)

! 1750:[sumjct] Summing/Differencing Junctions 
      RT_8 = - iq_L1 + iqref

! 1760:[gain] Gain Block 
!  L
      RT_36 = Lpu * id_L1

! 1770:[sumjct] Summing/Differencing Junctions 
      RT_6 = - id_L1 + idref

! 1780:[gain] Gain Block 
!  L
      RT_39 = Lpu * iq_L1

! 1790:[inv] Interpolated Logic Inverter 
      IF (DBLK .NE. 0) THEN
         RST = 0
      ELSE
         RST = 1
      ENDIF

! 1800:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn(RT_8, RT_9, IT_8, RST, Kpq, Tiq, 1.0,&
     & 0.6, -0.6)


! 1810:[gain] Gain Block 
!  L
      RT_37 = 0.5 * RT_36

! 1820:[trans_filt] Nth Order Butterworth/Chebyshev Filter 
!
!  BUTTERWORTH FILTER
!
      CALL COMPONENT_ID(ICALL_NO,1719138732)
      CALL FILN15(3,120.0,0.0, 0.0 ,1,1,0,RT_85,vq)
!

! 1830:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn(RT_6, RT_7, IT_7, RST, Kpd, Tid, 1.0,&
     & 0.6, -0.6)


! 1840:[datatap] Scalar/Array Tap 
      RT_86 = RT_82(1)

! 1850:[gain] Gain Block 
!  L
      RT_38 = 0.5 * RT_39

! 1860:[trans_filt] Nth Order Butterworth/Chebyshev Filter 
!
!  BUTTERWORTH FILTER
!
      CALL COMPONENT_ID(ICALL_NO,1954643238)
      CALL FILN15(3,120.0,0.0, 0.0 ,1,1,0,RT_86,vd)
!

! 1870:[sumjct] Summing/Differencing Junctions 
      vq1 = + RT_37 + RT_9 + vq

! 1880:[sumjct] Summing/Differencing Junctions 
      vd1 = - RT_38 + RT_7 + vd

! 1890:[polar_rec] Polar Rectangular coordinate converter 
      RT_46 = SQRT(vd1*vd1+vq1*vq1)
      IF ((ABS(vd1).GT.1.0E-20).OR.(ABS(vq1).GT.1.0E-20)) THEN
        RT_45 = ATAN2(vq1,vd1)
      ELSE
        RT_45 = 0.0
      ENDIF

! 1900:[gain] Gain Block 
!  was INV_Vdcbase
      RT_41 = INV_Vbase_LNpk * RT_46

! 1910:[inv] Interpolated Logic Inverter 
      IF (DBLK .NE. 0) THEN
         IT_6 = 0
      ELSE
         IT_6 = 1
      ENDIF

! 1920:[div] Divider 
      IF (ABS(RT_42) .LT. 1.0E-100) THEN
         IF (RT_42 .LT. 0.0)  THEN
            RT_40 = -1.0E100 * RT_41
         ELSE
            RT_40 =  1.0E100 * RT_41
         ENDIF
      ELSE
         RT_40 = RT_41 / RT_42
      ENDIF

! 1930:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn(RT_5, P_MPPT, IT_5, IT_6, 0.01, 0.1, &
     &1.0, P_Max, P_Min)


! 1940:[inv] Interpolated Logic Inverter 
      IF (DBLK .NE. 0) THEN
         IT_2 = 0
      ELSE
         IT_2 = 1
      ENDIF

! 1950:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (0.2 .LE. 1.15) THEN
        RT_48 = LIMIT(0.2, 1.15, RT_40)
      ELSE
        RT_48 = RT_40
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,753910850,1,"Lower limit is more than&
     & the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1960:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(Ia_C,Ib_C,Ic_C,RT_30,RT_31,RT_32,phi,1)
      RT_31 = -RT_31

! 1970:[div] Divider 
      IF (ABS(RT_20) .LT. 1.0E-100) THEN
         IF (RT_20 .LT. 0.0)  THEN
            RT_21 = -1.0E100 * Ldamp
         ELSE
            RT_21 =  1.0E100 * Ldamp
         ENDIF
      ELSE
         RT_21 = Ldamp / RT_20
      ENDIF

! 1980:[sumjct] Summing/Differencing Junctions 
      RT_3 = + P_MPPT - P_dc

! 1990:[inv] Interpolated Logic Inverter 
      IF (DBLK .NE. 0) THEN
         IT_4 = 0
      ELSE
         IT_4 = 1
      ENDIF

! 2000:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn(RT_1, RT_2, IT_1, IT_2, 1.0, 10.0, 1.&
     &0, 0.34, -0.34)


! 2010:[polar_rec] Polar Rectangular coordinate converter 
      RT_47 = RT_48*COS(RT_45)
      RT_49 = RT_48*SIN(RT_45)

! 2020:[datamerge] Merges data signals into an array 
      RT_81(1) = RT_30
      RT_81(2) = RT_31

! 2030:[gain] Gain Block 
!  
      RT_83 = 1.0 * RT_81

! 2040:[datatap] Scalar/Array Tap 
      iq = RT_83(2)

! 2050:[datatap] Scalar/Array Tap 
      id = RT_83(1)

! 2060:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_21 .LT. 0.0) THEN
        Rdamp = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,1592708771,1,2,"A negative value i&
     &s detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,1592708771,1,-1,"Input is treated &
     &as 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         Rdamp = SQRT(RT_21)
      ENDIF
      NSTORL = NSTORL + 1

! 2070:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn(RT_3, RT_4, IT_3, IT_4, 0.1, 0.1, 1.0&
     &, 0.7, 0.0)


! 2080:[select] Two Input Selector 
      IF (MPPT_Vdc .EQ. RTCI(NRTCI)) THEN
         Ref_Boost = RT_2
      ELSE
         Ref_Boost = RT_4
      ENDIF
      NRTCI = NRTCI + 1
!

! 2090:[mult] Multiplier 
      RT_44 = RT_45 * RT_52

! 2100:[gain] Gain Block 
!  Gain
      RT_50 = 1.0 * RT_49

! 2110:[abcdq0] abc dq0 transformation 
!DQ0 to ABC transformation
      RVD1_1 = -RT_50
      CALL TRDQO(Ref_a,Ref_b,Ref_c,RT_47,RVD1_1,RT_51,phi,-1)

! 2120:[pgb] Output Channel 'Iq L1'

      PGB(IPGB+13) = iq_L1

! 2130:[pgb] Output Channel 'Id L1'

      PGB(IPGB+14) = id_L1

! 2140:[pgb] Output Channel 'Iq Reference'

      PGB(IPGB+15) = iqref

! 2150:[pgb] Output Channel 'Iq  Measured'

      PGB(IPGB+16) = iq

! 2160:[pgb] Output Channel 'Id  Measured'

      PGB(IPGB+17) = id

! 2170:[pgb] Output Channel 'Vq Measured'

      PGB(IPGB+18) = vq

! 2180:[pgb] Output Channel 'Id Reference'

      PGB(IPGB+19) = idref

! 2200:[pgb] Output Channel 'Vd Measured'

      PGB(IPGB+23) = vd

! 2220:[pgb] Output Channel 'freq_control'

      PGB(IPGB+27) = freq_control

! 2230:[pgb] Output Channel 'P_MPPT'

      PGB(IPGB+28) = P_MPPT

! 2240:[div] Divider 
      IF (ABS(INV_Zbase) .LT. 1.0E-100) THEN
         IF (INV_Zbase .LT. 0.0)  THEN
            Rdamp_pu = -1.0E100 * Rdamp
         ELSE
            Rdamp_pu =  1.0E100 * Rdamp
         ENDIF
      ELSE
         Rdamp_pu = Rdamp / INV_Zbase
      ENDIF

! 2250:[pgb] Output Channel 'Ref_Boost'

      PGB(IPGB+29) = Ref_Boost

! 2260:[pgb] Output Channel 'Ref_a'

      PGB(IPGB+30) = Ref_a

! 2270:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    GG5(1) : OUTPUT PULSE
!    GG5(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBLK,RVD1_1,RVD1_2,Ref_c,Crr,Crr,Ref_c,GG5)
!

! 2280:[pgb] Output Channel 'Ref_a'

      PGB(IPGB+31) = Ref_a

! 2290:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    GG2(1) : OUTPUT PULSE
!    GG2(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBLK,RVD1_1,RVD1_2,Crr,Ref_c,Ref_c,Crr,GG2)
!

! 2300:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    GG6(1) : OUTPUT PULSE
!    GG6(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBLK,RVD1_1,RVD1_2,Crr,Ref_b,Ref_b,Crr,GG6)
!

! 2310:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    GG3(1) : OUTPUT PULSE
!    GG3(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBLK,RVD1_1,RVD1_2,Ref_b,Crr,Crr,Ref_b,GG3)
!

! 2320:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    GG4(1) : OUTPUT PULSE
!    GG4(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBLK,RVD1_1,RVD1_2,Crr,Ref_a,Ref_a,Crr,GG4)
!

! 2330:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    GG1(1) : OUTPUT PULSE
!    GG1(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBLK,RVD1_1,RVD1_2,Ref_a,Crr,Crr,Ref_a,GG1)
!

! 2360:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    GBoost(1) : OUTPUT PULSE
!    GBoost(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBLK,RVD1_1,RVD1_2,Ref_Boost,carr,carr,Ref_Boost,G&
     &Boost)
!

! 2370:[pgb] Output Channel 'Delta'

      PGB(IPGB+34) = RT_44

! 2380:[pgb] Output Channel 'm*'

      PGB(IPGB+35) = RT_40

! 2390:[div] Divider 
      IF (ABS(Ki_Vdc) .LT. 1.0E-100) THEN
         IF (Ki_Vdc .LT. 0.0)  THEN
            Ti_Vdc = -1.0E100 * RT_61
         ELSE
            Ti_Vdc =  1.0E100 * RT_61
         ENDIF
      ELSE
         Ti_Vdc = RT_61 / Ki_Vdc
      ENDIF

! 2400:[ratelimit] Rate Limiter 
!  C/s
      CALL RATE_LIMITER(5.0,5.0,RT_55,RT_56)

! 2410:[photovoltaic_source] photovoltaic source 'PVarray1'
      CALL COMPONENT_ID(ICALL_NO,1498813839)
      CALL PHOTOVOLT1_EXE(SS, (IBRCH+68),RT_54,RT_56,RVD1_1,RVD1_2,RVD1_&
     &3, RVD1_4)

! 2420:[peswitch] Power electronic switch 
! Power Electronic Switch Model: IGBT
      CALL COMPONENT_ID(ICALL_NO,340464693)
      CALL PESWITCH1_EXE(SS, (IBRCH+16), NINT(GG2(1)), GG2(2))

! 2430:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,653073359)
      CALL E_VARRLC1_EXE(2 ,SS ,  (IBRCH+28), 0, Cdamp, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS ,  (IBRCH+29), 0, Cdamp, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS ,  (IBRCH+30), 0, Cdamp, 0.0)

! 2440:[peswitch] Power electronic switch 
! Power Electronic Switch Model: IGBT
      CALL COMPONENT_ID(ICALL_NO,1914251391)
      CALL PESWITCH1_EXE(SS, (IBRCH+17), NINT(GG6(1)), GG6(2))

! 2450:[peswitch] Power electronic switch 
! Power Electronic Switch Model: IGBT
      CALL COMPONENT_ID(ICALL_NO,22505244)
      CALL PESWITCH1_EXE(SS, (IBRCH+18), NINT(GG4(1)), GG4(2))

! 2460:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,2122104555)
      CALL E_VARRLC1_EXE(0 ,SS ,  (IBRCH+22), 0, Rdamp, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS ,  (IBRCH+23), 0, Rdamp, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS ,  (IBRCH+24), 0, Rdamp, 0.0)

! 2470:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,140687348)
      CALL E_VARRLC1_EXE(2 ,SS ,  (IBRCH+31), 0, Cfilter, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS ,  (IBRCH+32), 0, Cfilter, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS ,  (IBRCH+33), 0, Cfilter, 0.0)

! 2480:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,323929516)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+25), 0, Ldamp, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+26), 0, Ldamp, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+27), 0, Ldamp, 0.0)

! 2490:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,1182202335)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+19), 0, Lfilter, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+20), 0, Lfilter, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+21), 0, Lfilter, 0.0)

! 2500:[peswitch] Power electronic switch 
! Power Electronic Switch Model: IGBT
      CALL COMPONENT_ID(ICALL_NO,1677877503)
      CALL PESWITCH1_EXE(SS, (IBRCH+65), NINT(GBoost(1)), GBoost(2))

! 2510:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,112539802)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+62), 0, Lfilter, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+63), 0, Lfilter, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS ,  (IBRCH+64), 0, Lfilter, 0.0)

! 2520:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT2_EXE((IXFMR + 1),(IXFMR + 2),(IXFMR + 3), (IBRCH+52), (I&
     &BRCH+53), (IBRCH+54), (IBRCH+55), (IBRCH+56), (IBRCH+57),0,0,0,0,0&
     &,0,SS,0,1.0,0)

! 2530:[peswitch] Power electronic switch 
! Power Electronic Switch Model: IGBT
      CALL COMPONENT_ID(ICALL_NO,1649171899)
      CALL PESWITCH1_EXE(SS, (IBRCH+15), NINT(GG5(1)), GG5(2))

! 2540:[LLTX_SCALER_15_2_1]  
!
!
!

      IF(TIMEZERO) THEN
        STORF(NSTORF)=DELT/(0.025*(MV_Vbase*MV_Vbase/Sbase)/(TWO_PI*Syst&
     &em_Freq))
      ENDIF
      Yc  = STORF(NSTORF)
      Ycm = Scale*Yc

      Hka_n_1 =  STORF(NSTORF+1)
      Hkb_n_1 =  STORF(NSTORF+2)
      Hkc_n_1 =  STORF(NSTORF+3)
      !
      Hma_n_1 =  STORF(NSTORF+4)
      Hmb_n_1 =  STORF(NSTORF+5)
      Hmc_n_1 =  STORF(NSTORF+6)
      !
      ! History current calclulation is done for one loss loss line segment
      Hma_n = 2*VDC(NT_15(1),SS)*Yc - Hka_n_1
      Hmb_n = 2*VDC(NT_15(2),SS)*Yc - Hkb_n_1
      Hmc_n = 2*VDC(NT_15(3),SS)*Yc - Hkc_n_1
      !
      Hka_n = 2*VDC(NT_14(1),SS)*Yc - Hma_n_1
      Hkb_n = 2*VDC(NT_14(2),SS)*Yc - Hmb_n_1
      Hkc_n = 2*VDC(NT_14(3),SS)*Yc - Hmc_n_1
      ! History current is saved for the next time step
      STORF(NSTORF+1)= Hka_n
      STORF(NSTORF+2)= Hkb_n
      STORF(NSTORF+3)= Hkc_n
      !
      STORF(NSTORF+4)= Hma_n
      STORF(NSTORF+5)= Hmb_n
      STORF(NSTORF+6)= Hmc_n

! Ensure main program records CCIN current injections at these nodes
      IF ( TIMEZERO ) THEN
         ENABCCIN(NT_15(1), SS) = .TRUE.
         ENABCCIN(NT_15(2), SS) = .TRUE.
         ENABCCIN(NT_15(3), SS) = .TRUE.
!
         ENABCCIN(NT_14(1), SS) = .TRUE.
         ENABCCIN(NT_14(2), SS) = .TRUE.
         ENABCCIN(NT_14(3), SS) = .TRUE.
      ENDIF

! If 'SCL' number of parallel loss less lines are assumed. To save computation time only one unit (e.g. wind turbine) is simulated at k th side.
!If side m has 'SCL' number of parallel lossless lines connected together. Total impedance is Zc/SCL and total current injection is Hm*SCAL
      CCIN(NT_15(1),SS) = CCIN(NT_15(1),SS) + Hka_n
      CCIN(NT_15(2),SS) = CCIN(NT_15(2),SS) + Hkb_n
      CCIN(NT_15(3),SS) = CCIN(NT_15(3),SS) + Hkc_n
!
      GGIN(NT_15(1),SS) = GGIN(NT_15(1),SS) + Yc
      GGIN(NT_15(2),SS) = GGIN(NT_15(2),SS) + Yc
      GGIN(NT_15(3),SS) = GGIN(NT_15(3),SS) + Yc
!
!m Side current injection Scaled up by SCL
      CCIN(NT_14(1),SS) = CCIN(NT_14(1),SS) + Scale*Hma_n
      CCIN(NT_14(2),SS) = CCIN(NT_14(2),SS) + Scale*Hmb_n
      CCIN(NT_14(3),SS) = CCIN(NT_14(3),SS) + Scale*Hmc_n
!
!m Side Condutance Scaled down by SCL
      GGIN(NT_14(1),SS) = GGIN(NT_14(1),SS) + Ycm
      GGIN(NT_14(2),SS) = GGIN(NT_14(2),SS) + Ycm
      GGIN(NT_14(3),SS) = GGIN(NT_14(3),SS) + Ycm

      NSTORF = NSTORF + 7

! 2550:[peswitch] Power electronic switch 
! Power Electronic Switch Model: IGBT
      CALL COMPONENT_ID(ICALL_NO,560269169)
      CALL PESWITCH1_EXE(SS, (IBRCH+14), NINT(GG3(1)), GG3(2))

! 2560:[peswitch] Power electronic switch 
! Power Electronic Switch Model: IGBT
      CALL COMPONENT_ID(ICALL_NO,276392442)
      CALL PESWITCH1_EXE(SS, (IBRCH+5), NINT(GG1(1)), GG1(2))

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,1555825228)
      CALL PESWITCH1_EXE(SS, (IBRCH+66), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,290587761)
      CALL PESWITCH1_EXE(SS, (IBRCH+4), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,559188706)
      CALL PESWITCH1_EXE(SS, (IBRCH+9), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,88825024)
      CALL PESWITCH1_EXE(SS, (IBRCH+10), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,1855686379)
      CALL PESWITCH1_EXE(SS, (IBRCH+13), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,1491049721)
      CALL PESWITCH1_EXE(SS, (IBRCH+12), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,1860773741)
      CALL PESWITCH1_EXE(SS, (IBRCH+11), 1, 0.0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = Ppu
      STOF(ISTOF + 2) = Qpu
      STOI(ISTOI + 1) = DBLK1
      STOF(ISTOF + 3) = Vpu
      STOI(ISTOI + 2) = Scale
      STOF(ISTOF + 4) = System_Freq
      STOF(ISTOF + 5) = Sbase
      STOF(ISTOF + 6) = MV_Vbase
      STOF(ISTOF + 7) = INV_Vbase
      STOF(ISTOF + 8) = Vdc_Base
      STOF(ISTOF + 9) = Lpu
      STOI(ISTOI + 3) = PQflag
      STOF(ISTOF + 10) = Pmax
      STOF(ISTOF + 11) = Pmin
      STOF(ISTOF + 12) = Qmax
      STOF(ISTOF + 13) = Qmin
      STOF(ISTOF + 14) = Kp_lim
      STOF(ISTOF + 15) = Ki_lim
      STOI(ISTOI + 4) = MPPT_Vdc
      STOI(ISTOI + 5) = wtype
      STOF(ISTOF + 16) = Kp_PLL
      STOF(ISTOF + 17) = Ki_PLL
      STOF(ISTOF + 18) = Kp_P
      STOF(ISTOF + 19) = Ki_P
      STOF(ISTOF + 20) = Fdrp
      STOF(ISTOF + 21) = Qflag
      STOF(ISTOF + 22) = Vflag
      STOF(ISTOF + 23) = Kp_Q
      STOF(ISTOF + 24) = Ki_Q
      STOF(ISTOF + 25) = DVS_dbd
      STOF(ISTOF + 26) = DVS_gain
      STOF(ISTOF + 27) = Kp_V
      STOF(ISTOF + 28) = Ki_V
      STOF(ISTOF + 29) = Kp_Vd
      STOF(ISTOF + 30) = Ki_Vd
      STOF(ISTOF + 31) = Vdrp
      STOF(ISTOF + 32) = Kp_rocof
      STOF(ISTOF + 33) = Ti_rocof
      STOF(ISTOF + 34) = Kpd
      STOF(ISTOF + 35) = Kid
      STOF(ISTOF + 36) = Kpq
      STOF(ISTOF + 37) = Kiq
      STOF(ISTOF + 38) = Imax
      STOF(ISTOF + 39) = Vdip
      STOF(ISTOF + 40) = Vup
      STOF(ISTOF + 41) = T_frz
      STOF(ISTOF + 42) = Kp_Vdc
      STOF(ISTOF + 43) = Ki_Vdc
      STOF(ISTOF + 44) = d_VSM
      STOF(ISTOF + 45) = m_VSM
      STOF(ISTOF + 46) = RT_1
      STOF(ISTOF + 47) = RT_2
      STOI(ISTOI + 6) = IT_1
      STOI(ISTOI + 7) = IT_2
      STOF(ISTOF + 48) = RT_3
      STOF(ISTOF + 49) = RT_4
      STOI(ISTOI + 8) = IT_3
      STOI(ISTOI + 9) = IT_4
      STOF(ISTOF + 50) = RT_5
      STOI(ISTOI + 10) = IT_5
      STOI(ISTOI + 11) = IT_6
      STOF(ISTOF + 51) = RT_6
      STOF(ISTOF + 52) = RT_7
      STOI(ISTOI + 12) = IT_7
      STOF(ISTOF + 53) = RT_8
      STOF(ISTOF + 54) = RT_9
      STOI(ISTOI + 13) = IT_8
      STOI(ISTOI + 14) = RST
      STOF(ISTOF + 63) = freq_control
      STOF(ISTOF + 64) = phi
      STOF(ISTOF + 68) = INV_Vbase_LNpk
      STOF(ISTOF + 69) = RT_12
      STOF(ISTOF + 70) = RT_13
      STOF(ISTOF + 71) = INV_Ibase
      STOF(ISTOF + 72) = RT_14
      STOF(ISTOF + 73) = RT_15
      STOF(ISTOF + 74) = RT_16
      STOF(ISTOF + 75) = RT_17
      STOF(ISTOF + 76) = RT_18
      STOF(ISTOF + 77) = INV_Sbase
      STOF(ISTOF + 81) = RT_20
      STOF(ISTOF + 82) = Cdamp
      STOF(ISTOF + 83) = RT_21
      STOF(ISTOF + 84) = Ldamp
      STOF(ISTOF + 85) = Lfilter
      STOF(ISTOF + 86) = RT_22
      STOF(ISTOF + 87) = RT_23
      STOF(ISTOF + 88) = RT_24
      STOF(ISTOF + 89) = RT_25
      STOF(ISTOF + 90) = RT_26
      STOF(ISTOF + 91) = RT_27
      STOF(ISTOF + 92) = RT_28
      STOF(ISTOF + 93) = INV_Lbase
      STOF(ISTOF + 94) = RT_29
      STOF(ISTOF + 95) = Ia_C
      STOF(ISTOF + 96) = Ib_C
      STOF(ISTOF + 97) = Ic_C
      STOF(ISTOF + 98) = RT_30
      STOF(ISTOF + 99) = RT_31
      STOF(ISTOF + 100) = RT_32
      STOF(ISTOF + 101) = Ea
      STOF(ISTOF + 102) = Eb
      STOF(ISTOF + 103) = Ec
      STOF(ISTOF + 104) = RT_33
      STOF(ISTOF + 105) = RT_34
      STOF(ISTOF + 106) = RT_35
      STOF(ISTOF + 107) = RT_36
      STOF(ISTOF + 108) = RT_37
      STOF(ISTOF + 109) = RT_38
      STOF(ISTOF + 110) = iq
      STOF(ISTOF + 111) = id
      STOF(ISTOF + 112) = vq
      STOF(ISTOF + 113) = vd
      STOF(ISTOF + 114) = RT_39
      STOF(ISTOF + 115) = RT_40
      STOF(ISTOF + 116) = RT_41
      STOF(ISTOF + 117) = RT_42
      STOF(ISTOF + 120) = RT_43
      STOF(ISTOF + 121) = Crr
      STOF(ISTOF + 122) = RT_44
      STOF(ISTOF + 133) = RT_45
      STOF(ISTOF + 134) = RT_46
      STOF(ISTOF + 135) = vd1
      STOF(ISTOF + 136) = vq1
      STOF(ISTOF + 137) = RT_47
      STOF(ISTOF + 138) = RT_48
      STOF(ISTOF + 139) = RT_49
      STOF(ISTOF + 140) = Ref_b
      STOF(ISTOF + 141) = RT_50
      STOF(ISTOF + 142) = RT_51
      STOF(ISTOF + 143) = Ref_c
      STOF(ISTOF + 144) = RT_52
      STOF(ISTOF + 145) = Fcr
      STOF(ISTOF + 146) = RT_53
      STOF(ISTOF + 147) = RT_54
      STOF(ISTOF + 148) = RT_55
      STOF(ISTOF + 149) = RT_56
      STOF(ISTOF + 150) = carr
      STOF(ISTOF + 153) = RT_57
      STOF(ISTOF + 154) = RT_58
      STOF(ISTOF + 155) = P_dc
      STOF(ISTOF + 156) = Ref_Boost
      STOF(ISTOF + 157) = I_dc
      STOF(ISTOF + 158) = VrefMPPT
      STOF(ISTOF + 159) = P_MPPT
      STOF(ISTOF + 160) = P_Max
      STOF(ISTOF + 161) = P_Min
      STOF(ISTOF + 162) = Voc
      STOF(ISTOF + 163) = P_PV
      STOF(ISTOF + 164) = Vpv
      STOF(ISTOF + 165) = Ipv
      STOF(ISTOF + 166) = RT_59
      STOI(ISTOI + 15) = IT_9
      STOF(ISTOF + 167) = RT_60
      STOI(ISTOI + 16) = DBLK
      STOI(ISTOI + 17) = IT_10
      STOF(ISTOF + 168) = INIT
      STOF(ISTOF + 169) = Vrms
      STOF(ISTOF + 170) = V_dc
      STOF(ISTOF + 171) = Q
      STOF(ISTOF + 172) = P
      STOF(ISTOF + 173) = RT_61
      STOF(ISTOF + 174) = Ti_Vdc
      STOF(ISTOF + 175) = Tiq
      STOF(ISTOF + 176) = RT_62
      STOF(ISTOF + 177) = RT_63
      STOF(ISTOF + 178) = Tid
      STOF(ISTOF + 179) = Ti_Q
      STOF(ISTOF + 180) = RT_64
      STOF(ISTOF + 181) = RT_65
      STOF(ISTOF + 182) = Ti_P
      STOF(ISTOF + 189) = INV_Ibase_pk
      STOF(ISTOF + 190) = RT_67
      STOF(ISTOF + 191) = RT_68
      STOF(ISTOF + 192) = RT_69
      STOF(ISTOF + 193) = RT_70
      STOF(ISTOF + 194) = RT_71
      STOF(ISTOF + 195) = RT_72
      STOF(ISTOF + 196) = iq_L1
      STOF(ISTOF + 197) = id_L1
      STOF(ISTOF + 198) = Rdamp_pu
      STOF(ISTOF + 199) = Rdamp
      STOF(ISTOF + 200) = RT_73
      STOF(ISTOF + 201) = Wbase
      STOF(ISTOF + 202) = INV_Zbase
      STOF(ISTOF + 203) = Cfilter_pu
      STOF(ISTOF + 204) = RT_74
      STOF(ISTOF + 205) = RT_75
      STOF(ISTOF + 206) = Cfilter
      STOF(ISTOF + 207) = RT_76
      STOF(ISTOF + 208) = Ti_PLL
      STOF(ISTOF + 209) = Ti_V
      STOF(ISTOF + 210) = RT_77
      STOF(ISTOF + 211) = Ti_Vd
      STOF(ISTOF + 212) = RT_78
      STOF(ISTOF + 225) = RT_85
      STOF(ISTOF + 226) = RT_86
      STOF(ISTOF + 227) = RT_87
      STOF(ISTOF + 228) = Ti_lim
      STOF(ISTOF + 229) = Ref_a
      STOF(ISTOF + 230) = iqref
      STOF(ISTOF + 231) = idref
      STOF(ISTOF + 238) = VL

! Array (1:2) quantities...
      DO IT_0 = 1,2
         STOF(ISTOF + 60 + IT_0) = RT_10(IT_0)
         STOF(ISTOF + 117 + IT_0) = GG1(IT_0)
         STOF(ISTOF + 122 + IT_0) = GG6(IT_0)
         STOF(ISTOF + 124 + IT_0) = GG2(IT_0)
         STOF(ISTOF + 126 + IT_0) = GG3(IT_0)
         STOF(ISTOF + 128 + IT_0) = GG4(IT_0)
         STOF(ISTOF + 130 + IT_0) = GG5(IT_0)
         STOF(ISTOF + 150 + IT_0) = GBoost(IT_0)
         STOF(ISTOF + 212 + IT_0) = RT_79(IT_0)
         STOF(ISTOF + 214 + IT_0) = RT_80(IT_0)
         STOF(ISTOF + 216 + IT_0) = RT_81(IT_0)
         STOF(ISTOF + 218 + IT_0) = RT_82(IT_0)
         STOF(ISTOF + 220 + IT_0) = RT_83(IT_0)
         STOF(ISTOF + 222 + IT_0) = RT_84(IT_0)
      END DO

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 54 + IT_0) = Igrid(IT_0)
         STOF(ISTOF + 57 + IT_0) = Vgrid(IT_0)
         STOF(ISTOF + 64 + IT_0) = RT_11(IT_0)
         STOF(ISTOF + 77 + IT_0) = RT_19(IT_0)
         STOF(ISTOF + 182 + IT_0) = RT_66(IT_0)
         STOF(ISTOF + 185 + IT_0) = IL1(IT_0)
         STOF(ISTOF + 231 + IT_0) = E1(IT_0)
         STOF(ISTOF + 234 + IT_0) = I_C(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE SimpleSF_15_2_1Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
      REAL    REALPOLE      ! Real Pole
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
!     SUBR    DGTL_RMS3     ! '3 Phase Digital RMS Meter'
!     SUBR    EMTDC_XONDLAY  ! 'Delay Function with Interpolation'
!     SUBR    Control_12_2_1_1_1_1Out  ! 
!     SUBR    PI_AntiWindUp_50_2_1Out  ! 
      REAL    VBRANCH       ! Voltage across the branch

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_3, NT_6(3), NT_18, NT_19, NT_20
      INTEGER  NT_22(3)

! Control Signals
      INTEGER  IT_1, IT_3, IT_5, IT_7, IT_8, IT_9
      INTEGER  IT_10
      REAL     Igrid(3), Vgrid(3), RT_13, RT_14
      REAL     RT_16, RT_17, RT_25, RT_27, RT_29
      REAL     RT_43, RT_51, RT_52, RT_57, RT_58
      REAL     P_dc, I_dc, P_Min, Voc, P_PV, Vpv
      REAL     Ipv, RT_59, Vrms, V_dc, Q, P
      REAL     RT_61, RT_62, RT_63, RT_64, RT_65
      REAL     IL1(3), RT_75, RT_76, RT_77, RT_78
      REAL     RT_87, E1(3), I_C(3), VL

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD2_1(2), RVD2_2(2)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 35
      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 49
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 72
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      IT_1     = STOI(ISTOI + 6)
      IT_3     = STOI(ISTOI + 8)
      IT_5     = STOI(ISTOI + 10)
      IT_7     = STOI(ISTOI + 12)
      IT_8     = STOI(ISTOI + 13)
      RT_13    = STOF(ISTOF + 70)
      RT_14    = STOF(ISTOF + 72)
      RT_16    = STOF(ISTOF + 74)
      RT_17    = STOF(ISTOF + 75)
      RT_25    = STOF(ISTOF + 89)
      RT_27    = STOF(ISTOF + 91)
      RT_29    = STOF(ISTOF + 94)
      RT_43    = STOF(ISTOF + 120)
      RT_51    = STOF(ISTOF + 142)
      RT_52    = STOF(ISTOF + 144)
      RT_57    = STOF(ISTOF + 153)
      RT_58    = STOF(ISTOF + 154)
      P_dc     = STOF(ISTOF + 155)
      I_dc     = STOF(ISTOF + 157)
      P_Min    = STOF(ISTOF + 161)
      Voc      = STOF(ISTOF + 162)
      P_PV     = STOF(ISTOF + 163)
      Vpv      = STOF(ISTOF + 164)
      Ipv      = STOF(ISTOF + 165)
      RT_59    = STOF(ISTOF + 166)
      IT_9     = STOI(ISTOI + 15)
      IT_10    = STOI(ISTOI + 17)
      Vrms     = STOF(ISTOF + 169)
      V_dc     = STOF(ISTOF + 170)
      Q        = STOF(ISTOF + 171)
      P        = STOF(ISTOF + 172)
      RT_61    = STOF(ISTOF + 173)
      RT_62    = STOF(ISTOF + 176)
      RT_63    = STOF(ISTOF + 177)
      RT_64    = STOF(ISTOF + 180)
      RT_65    = STOF(ISTOF + 181)
      RT_75    = STOF(ISTOF + 205)
      RT_76    = STOF(ISTOF + 207)
      RT_77    = STOF(ISTOF + 210)
      RT_78    = STOF(ISTOF + 212)
      RT_87    = STOF(ISTOF + 227)
      VL       = STOF(ISTOF + 238)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Igrid(IT_0) = STOF(ISTOF + 54 + IT_0)
         Vgrid(IT_0) = STOF(ISTOF + 57 + IT_0)
         IL1(IT_0) = STOF(ISTOF + 185 + IT_0)
         E1(IT_0) = STOF(ISTOF + 231 + IT_0)
         I_C(IT_0) = STOF(ISTOF + 234 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_3  = NODE(INODE + 5)
      NT_18 = NODE(INODE + 36)
      NT_19 = NODE(INODE + 37)
      NT_20 = NODE(INODE + 38)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_6(IT_0) = NODE(INODE + 5 + IT_0)
         NT_22(IT_0) = NODE(INODE + 41 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'SimpleSF_15_2_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[ammeter] Current Meter 'I_dc'
      I_dc = ( CBR((IBRCH+67), SS))

! 30:[voltmeter] Voltmeter (Line - Line) 'VL'
      VL = EMTDC_VVDC(SS, NT_18, NT_3)

! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IL1(1) = ( CBR((IBRCH+6), SS))
      IL1(2) = ( CBR((IBRCH+7), SS))
      IL1(3) = ( CBR((IBRCH+8), SS))

! 50:[ammeter] Current Meter 'I_C'
      I_C(1) = ( CBR((IBRCH+1), SS))
      I_C(2) = ( CBR((IBRCH+2), SS))
      I_C(3) = ( CBR((IBRCH+3), SS))

! 60:[voltmetergnd] Voltmeter (Line - Ground) 'E1'
      E1(1) = EMTDC_VVDC(SS, NT_22(1), 0)
      E1(2) = EMTDC_VVDC(SS, NT_22(2), 0)
      E1(3) = EMTDC_VVDC(SS, NT_22(3), 0)

! 70:[voltmeter] Voltmeter (Line - Line) 'V_dc'
      V_dc = EMTDC_VVDC(SS, NT_19, NT_3)

! 80:[ammeter] Current Meter 'Ipv'
      Ipv = ( CBR((IBRCH+61), SS))

! 90:[voltmeter] Voltmeter (Line - Line) 'Vpv'
      Vpv = EMTDC_VVDC(SS, NT_20, NT_3)

! 140:[const] Real Constant 

      RT_65 = 1.0

! 160:[const] Real Constant 

      RT_64 = 1.0

! 180:[const] Real Constant 

      RT_63 = 1.0

! 210:[const] Real Constant 

      RT_62 = 1.0

! 230:[const] Real Constant 

      RT_61 = 1.0

! 290:[const] Real Constant 

      RT_76 = 1.0

! 320:[const] Real Constant 

      RT_77 = 1.0

! 350:[const] Real Constant 

      RT_78 = 1.0

! 640:[const] Real Constant 

      RT_87 = 1.0

! 700:[emtconst] Commonly Used Constants (pi...) 
      RT_52 = BY180_PI

! 730:[const] Real Constant 

      RT_51 = 0.0

! 740:[consti] Integer Constant 

      IT_1 = 0

! 750:[const] Real Constant 

      RT_57 = 5000.0

! 780:[emtconst] Commonly Used Constants (pi...) 
      RT_17 = SQRT_2

! 790:[const] Real Constant 'mf'

      RT_43 = 70.0

! 810:[emtconst] Commonly Used Constants (pi...) 
      RT_13 = SQRT_3

! 820:[pgb] Output Channel 'V_dc'

      PGB(IPGB+2) = V_dc

! 830:[const] Real Constant 

      P_Min = 0.0

! 880:[emtconst] Commonly Used Constants (pi...) 
      RT_14 = SQRT_2

! 890:[emtconst] Commonly Used Constants (pi...) 
      RT_16 = SQRT_1BY3

! 950:[const] Real Constant 'kV'

      Voc = 1.015

! 960:[mult] Multiplier 
      P_PV = Vpv * Ipv

! 970:[consti] Integer Constant 

      IT_5 = 0

! 980:[consti] Integer Constant 

      IT_3 = 0

! 990:[emtconst] Commonly Used Constants (pi...) 
      RT_29 = TWO_PI

! 1010:[mult] Multiplier 
      RT_58 = V_dc * I_dc

! 1020:[realpole] Real Pole 
!  Real_Pole
      P_dc = REALPOLE(0,1,0,1.0,0.01,RT_58,0.0,-1.0E20,1.0E20)

! 1030:[pgb] Output Channel 'P_dc'

      PGB(IPGB+6) = P_dc

! 1040:[pgb] Output Channel 'P_PV'

      PGB(IPGB+7) = P_PV

! 1070:[const] Real Constant 

      RT_75 = 1000000.0

! 1080:[pgb] Output Channel 'I_dc'

      PGB(IPGB+8) = I_dc

! 1090:[const] Real Constant 

      RT_27 = 1000000.0

! 1100:[emtconst] Commonly Used Constants (pi...) 
      RT_25 = TWO_PI

! 1120:[pgb] Output Channel 'V_dc'

      PGB(IPGB+9) = V_dc

! 1140:[pgb] Output Channel 'Ipv'

      PGB(IPGB+10) = Ipv

! 1150:[pgb] Output Channel 'Vpv'

      PGB(IPGB+11) = Vpv

! 1170:[consti] Integer Constant 

      IT_7 = 0

! 1180:[consti] Integer Constant 

      IT_8 = 0

! 1190:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Igrid(1) = ( CBR((IBRCH+40), SS))
      Igrid(2) = ( CBR((IBRCH+41), SS))
      Igrid(3) = ( CBR((IBRCH+42), SS))
      Vgrid(1) = EMTDC_VVDC(SS, NT_6(1), 0)
      Vgrid(2) = EMTDC_VVDC(SS, NT_6(2), 0)
      Vgrid(3) = EMTDC_VVDC(SS, NT_6(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+40), (IBRCH+41), (IBRCH+4&
     &2),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1247051388,RVD1_1,"Pd")
      P = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+40), (IBRCH+41), (IBRCH+4&
     &2),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1247051388,RVD1_1,"Qd")
      Q = RVD1_1
      CALL DGTL_RMS3(256,SS,NT_6(1),NT_6(2),NT_6(3),RTCF(IVD1_1+3),1.0,0&
     &.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1247051388,RVD1_1,"Vd")
      Vrms = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1247051388,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1247051388,1,"hide2")
      ENDIF

! 1280:[range] Range Comparator 
!  Band_Compare
      IF (Vrms .LT. 0.0) THEN
         RT_59 = 0.0
      ELSE IF (Vrms .LE. 2.3) THEN
         RT_59 = 1.0
      ELSE
         RT_59 = 0.0
      ENDIF
!

! 1290:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_9 = NINT(RT_59)

! 1300:[delay] Binary ON Delay with Interpolation 
!
      RVD2_1(1) = FLOAT(IT_9)
      RVD2_1(2) = 0.0
      CALL EMTDC_XONDLAY(0,0.01,RVD2_1,RVD2_2)
      IT_10 = NINT(RVD2_2(1))

! 1600:[Control_12_2_1_1_1_1]  'Control_12_2_1_1'
      CALL Control_12_2_1_1_1_1Out()


! 1800:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out()


! 1830:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out()


! 1930:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out()


! 2000:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out()


! 2070:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out()


! 2190:[pgb] Output Channel 'Igrid'

      DO IVD1_1 = 1, 3
         PGB(IPGB+20+IVD1_1-1) = Igrid(IVD1_1)
      ENDDO

! 2210:[pgb] Output Channel 'Vgrid'

      DO IVD1_1 = 1, 3
         PGB(IPGB+24+IVD1_1-1) = Vgrid(IVD1_1)
      ENDDO

! 2340:[pgb] Output Channel 'Q'

      PGB(IPGB+32) = Q

! 2350:[pgb] Output Channel 'P'

      PGB(IPGB+33) = P

! 2410:[photovoltaic_source] photovoltaic source 'PVarray1'
      NRTCF = NRTCF + 1

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+43), (IBRCH+44), (IBRCH+4&
     &5),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,887628669,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+43), (IBRCH+44), (IBRCH+4&
     &5),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,887628669,RVD1_1,"Qd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,887628669,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,887628669,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+58), (IBRCH+59), (IBRCH+6&
     &0),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1655014887,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+58), (IBRCH+59), (IBRCH+6&
     &0),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1655014887,RVD1_1,"Qd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1655014887,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1655014887,1,"hide2")
      ENDIF

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOI(ISTOI + 6) = IT_1
      STOI(ISTOI + 8) = IT_3
      STOI(ISTOI + 10) = IT_5
      STOI(ISTOI + 12) = IT_7
      STOI(ISTOI + 13) = IT_8
      STOF(ISTOF + 70) = RT_13
      STOF(ISTOF + 72) = RT_14
      STOF(ISTOF + 74) = RT_16
      STOF(ISTOF + 75) = RT_17
      STOF(ISTOF + 89) = RT_25
      STOF(ISTOF + 91) = RT_27
      STOF(ISTOF + 94) = RT_29
      STOF(ISTOF + 120) = RT_43
      STOF(ISTOF + 142) = RT_51
      STOF(ISTOF + 144) = RT_52
      STOF(ISTOF + 153) = RT_57
      STOF(ISTOF + 154) = RT_58
      STOF(ISTOF + 155) = P_dc
      STOF(ISTOF + 157) = I_dc
      STOF(ISTOF + 161) = P_Min
      STOF(ISTOF + 162) = Voc
      STOF(ISTOF + 163) = P_PV
      STOF(ISTOF + 164) = Vpv
      STOF(ISTOF + 165) = Ipv
      STOF(ISTOF + 166) = RT_59
      STOI(ISTOI + 15) = IT_9
      STOI(ISTOI + 17) = IT_10
      STOF(ISTOF + 169) = Vrms
      STOF(ISTOF + 170) = V_dc
      STOF(ISTOF + 171) = Q
      STOF(ISTOF + 172) = P
      STOF(ISTOF + 173) = RT_61
      STOF(ISTOF + 176) = RT_62
      STOF(ISTOF + 177) = RT_63
      STOF(ISTOF + 180) = RT_64
      STOF(ISTOF + 181) = RT_65
      STOF(ISTOF + 205) = RT_75
      STOF(ISTOF + 207) = RT_76
      STOF(ISTOF + 210) = RT_77
      STOF(ISTOF + 212) = RT_78
      STOF(ISTOF + 227) = RT_87
      STOF(ISTOF + 238) = VL

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 54 + IT_0) = Igrid(IT_0)
         STOF(ISTOF + 57 + IT_0) = Vgrid(IT_0)
         STOF(ISTOF + 185 + IT_0) = IL1(IT_0)
         STOF(ISTOF + 231 + IT_0) = E1(IT_0)
         STOF(ISTOF + 234 + IT_0) = I_C(IT_0)
      END DO


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE SimpleSF_15_2_1Dyn_Begin(Scale, System_Freq, Sbase,    &
     &   MV_Vbase, INV_Vbase, Vdc_Base, Lpu, PQflag, wtype, DVS_dbd,    &
     &   DVS_gain, T_frz)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    MPPT1_CFG     ! Maximum power point tracking configuration
!     SUBR    Control_12_2_1_1_1_1Dyn_Begin  ! 
!     SUBR    PI_AntiWindUp_50_2_1Dyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Scale, PQflag
      INTEGER, INTENT(IN)  :: wtype
      REAL,    INTENT(IN)  :: System_Freq, Sbase
      REAL,    INTENT(IN)  :: MV_Vbase, INV_Vbase
      REAL,    INTENT(IN)  :: Vdc_Base, Lpu
      REAL,    INTENT(IN)  :: DVS_dbd, DVS_gain
      REAL,    INTENT(IN)  :: T_frz

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, IT_3, IT_5, IT_7, IT_8
      REAL     RT_13, RT_14, RT_16, RT_17, RT_25
      REAL     RT_27, RT_29, RT_43, RT_51, RT_52
      REAL     RT_57, P_Min, Voc, RT_61, RT_62
      REAL     RT_63, RT_64, RT_65, RT_75, RT_76
      REAL     RT_77, RT_78, RT_87

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ICX                                 ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ICX       = NCX
      NCX       = NCX + 2
      INODE     = NNODE + 2
      NNODE     = NNODE + 49
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 72
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 100:[var] Variable Input Slider 'Irradiation'

! 110:[var] Variable Input Slider 'Temperature'

! 140:[const] Real Constant 
      RT_65 = 1.0

! 160:[const] Real Constant 
      RT_64 = 1.0

! 180:[const] Real Constant 
      RT_63 = 1.0

! 210:[const] Real Constant 
      RT_62 = 1.0

! 230:[const] Real Constant 
      RT_61 = 1.0

! 290:[const] Real Constant 
      RT_76 = 1.0

! 320:[const] Real Constant 
      RT_77 = 1.0

! 350:[const] Real Constant 
      RT_78 = 1.0

! 640:[const] Real Constant 
      RT_87 = 1.0

! 700:[emtconst] Commonly Used Constants (pi...) 
      RT_52 = BY180_PI

! 710:[sumjct] Summing/Differencing Junctions 

! 720:[unity] Type/Shape conversion block 

! 730:[const] Real Constant 
      RT_51 = 0.0

! 740:[consti] Integer Constant 
      IT_1 = 0

! 750:[const] Real Constant 
      RT_57 = 5000.0

! 760:[sig_gen] Variable Frequency Sawtooth Generator 
      CALL COMPONENT_ID(ICALL_NO,2070698406)
      CALL SAWTOOTH1_CFG(1.01,0.0)

! 770:[pgb] Output Channel 'Vdc_Base'

! 780:[emtconst] Commonly Used Constants (pi...) 
      RT_17 = SQRT_2

! 790:[const] Real Constant 'mf'
      RT_43 = 70.0

! 800:[unity] Type/Shape conversion block 

! 810:[emtconst] Commonly Used Constants (pi...) 
      RT_13 = SQRT_3

! 830:[const] Real Constant 
      P_Min = 0.0

! 840:[mult] Multiplier 

! 850:[sig_gen] Variable Frequency Sawtooth Generator 
      CALL COMPONENT_ID(ICALL_NO,1139468824)
      CALL SAWTOOTH1_CFG(1.0,-1.0)

! 860:[pgb] Output Channel 'Carrier'

! 870:[pgb] Output Channel 'Ppu'

! 880:[emtconst] Commonly Used Constants (pi...) 
      RT_14 = SQRT_2

! 890:[emtconst] Commonly Used Constants (pi...) 
      RT_16 = SQRT_1BY3

! 900:[mppt] Maximum power point tracker for photovoltaic source 
      CALL MPPT1_CFG(1.015,0.325,0.01,1.0)

! 910:[square] Square 

! 920:[pgb] Output Channel 'Qpu'

! 930:[div] Divider 

! 940:[sumjct] Summing/Differencing Junctions 

! 950:[const] Real Constant 'kV'
      Voc = 1.015

! 970:[consti] Integer Constant 
      IT_5 = 0

! 980:[consti] Integer Constant 
      IT_3 = 0

! 990:[emtconst] Commonly Used Constants (pi...) 
      RT_29 = TWO_PI

! 1000:[gain] Gain Block 

! 1050:[mult] Multiplier 

! 1060:[gain] Gain Block 

! 1070:[const] Real Constant 
      RT_75 = 1000000.0

! 1090:[const] Real Constant 
      RT_27 = 1000000.0

! 1100:[emtconst] Commonly Used Constants (pi...) 
      RT_25 = TWO_PI

! 1110:[mult] Multiplier 

! 1130:[square] Square 

! 1160:[pgb] Output Channel 'VrefMPPT'

! 1170:[consti] Integer Constant 
      IT_7 = 0

! 1180:[consti] Integer Constant 
      IT_8 = 0

! 1200:[ratelimit] Rate Limiter 

! 1210:[div] Divider 

! 1220:[div] Divider 

! 1230:[div] Divider 

! 1240:[div] Divider 

! 1250:[div] Divider 

! 1260:[div] Divider 

! 1270:[div] Divider 

! 1310:[gain] Gain Block 

! 1320:[div] Divider 

! 1330:[mult] Multiplier 

! 1340:[mult] Multiplier 

! 1350:[mult] Multiplier 

! 1360:[div] Divider 

! 1370:[gain] Gain Block 

! 1380:[gain] Gain Block 

! 1390:[gain] Gain Block 

! 1400:[div] Divider 

! 1410:[datatap] Scalar/Array Tap 

! 1420:[datatap] Scalar/Array Tap 

! 1430:[datatap] Scalar/Array Tap 

! 1440:[div] Divider 

! 1450:[mult] Multiplier 

! 1460:[mult] Multiplier 

! 1470:[div] Divider 

! 1480:[datatap] Scalar/Array Tap 

! 1490:[datatap] Scalar/Array Tap 

! 1500:[datatap] Scalar/Array Tap 

! 1510:[div] Divider 

! 1520:[datatap] Scalar/Array Tap 

! 1530:[datatap] Scalar/Array Tap 

! 1540:[datatap] Scalar/Array Tap 

! 1550:[div] Divider 

! 1560:[gain] Gain Block 

! 1570:[gain] Gain Block 

! 1580:[mult] Multiplier 

! 1590:[div] Divider 

! 1600:[Control_12_2_1_1_1_1]  'Control_12_2_1_1'
      CALL Control_12_2_1_1_1_1Dyn_Begin(DVS_dbd, DVS_gain, T_frz)


! 1610:[datatap] Scalar/Array Tap 

! 1620:[datatap] Scalar/Array Tap 

! 1630:[abcdq0] abc dq0 transformation 

! 1640:[datamerge] Merges data signals into an array 

! 1650:[abcdq0] abc dq0 transformation 

! 1660:[datamerge] Merges data signals into an array 

! 1670:[gain] Gain Block 

! 1680:[gain] Gain Block 

! 1690:[datatap] Scalar/Array Tap 

! 1700:[datatap] Scalar/Array Tap 

! 1710:[datatap] Scalar/Array Tap 

! 1720:[maxmin] Maximum/Minimum Functions 

! 1730:[mult] Multiplier 

! 1740:[unity] Type/Shape conversion block 

! 1750:[sumjct] Summing/Differencing Junctions 

! 1760:[gain] Gain Block 

! 1770:[sumjct] Summing/Differencing Junctions 

! 1780:[gain] Gain Block 

! 1790:[inv] Interpolated Logic Inverter 

! 1800:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn_Begin()


! 1810:[gain] Gain Block 

! 1820:[trans_filt] Nth Order Butterworth/Chebyshev Filter 

! 1830:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn_Begin()


! 1840:[datatap] Scalar/Array Tap 

! 1850:[gain] Gain Block 

! 1860:[trans_filt] Nth Order Butterworth/Chebyshev Filter 

! 1870:[sumjct] Summing/Differencing Junctions 

! 1880:[sumjct] Summing/Differencing Junctions 

! 1890:[polar_rec] Polar Rectangular coordinate converter 

! 1900:[gain] Gain Block 

! 1910:[inv] Interpolated Logic Inverter 

! 1920:[div] Divider 

! 1930:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn_Begin()


! 1940:[inv] Interpolated Logic Inverter 

! 1950:[hardlimit] Hard Limiter 

! 1960:[abcdq0] abc dq0 transformation 

! 1970:[div] Divider 

! 1980:[sumjct] Summing/Differencing Junctions 

! 1990:[inv] Interpolated Logic Inverter 

! 2000:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn_Begin()


! 2010:[polar_rec] Polar Rectangular coordinate converter 

! 2020:[datamerge] Merges data signals into an array 

! 2030:[gain] Gain Block 

! 2040:[datatap] Scalar/Array Tap 

! 2050:[datatap] Scalar/Array Tap 

! 2060:[sqrt] Square Root 

! 2070:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Dyn_Begin()


! 2080:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 2090:[mult] Multiplier 

! 2100:[gain] Gain Block 

! 2110:[abcdq0] abc dq0 transformation 

! 2120:[pgb] Output Channel 'Iq L1'

! 2130:[pgb] Output Channel 'Id L1'

! 2140:[pgb] Output Channel 'Iq Reference'

! 2150:[pgb] Output Channel 'Iq  Measured'

! 2160:[pgb] Output Channel 'Id  Measured'

! 2170:[pgb] Output Channel 'Vq Measured'

! 2180:[pgb] Output Channel 'Id Reference'

! 2200:[pgb] Output Channel 'Vd Measured'

! 2220:[pgb] Output Channel 'freq_control'

! 2230:[pgb] Output Channel 'P_MPPT'

! 2240:[div] Divider 

! 2250:[pgb] Output Channel 'Ref_Boost'

! 2260:[pgb] Output Channel 'Ref_a'

! 2270:[fp_int] Interpolated Firing Pulses 

! 2280:[pgb] Output Channel 'Ref_a'

! 2290:[fp_int] Interpolated Firing Pulses 

! 2300:[fp_int] Interpolated Firing Pulses 

! 2310:[fp_int] Interpolated Firing Pulses 

! 2320:[fp_int] Interpolated Firing Pulses 

! 2330:[fp_int] Interpolated Firing Pulses 

! 2360:[fp_int] Interpolated Firing Pulses 

! 2370:[pgb] Output Channel 'Delta'

! 2380:[pgb] Output Channel 'm*'

! 2390:[div] Divider 

! 2400:[ratelimit] Rate Limiter 

! 2410:[photovoltaic_source] photovoltaic source 'PVarray1'
      CALL COMPONENT_ID(ICALL_NO,1498813839)
      CALL PHOTOVOLT1_CFG(35,130,35,1,0.02,1000.0,0.01,1.5,1.103,1.0e-12&
     &,0.0025,0.001,1000.0,28.0)

! 2420:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(3, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 2430:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(2 ,SS ,  (IBRCH+28), 0)
      CALL E_VARRLC1_CFG(2 ,SS ,  (IBRCH+29), 0)
      CALL E_VARRLC1_CFG(2 ,SS ,  (IBRCH+30), 0)

! 2440:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(3, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 2450:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(3, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 2460:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS ,  (IBRCH+22), 0)
      CALL E_VARRLC1_CFG(0 ,SS ,  (IBRCH+23), 0)
      CALL E_VARRLC1_CFG(0 ,SS ,  (IBRCH+24), 0)

! 2470:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(2 ,SS ,  (IBRCH+31), 0)
      CALL E_VARRLC1_CFG(2 ,SS ,  (IBRCH+32), 0)
      CALL E_VARRLC1_CFG(2 ,SS ,  (IBRCH+33), 0)

! 2480:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+25), 0)
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+26), 0)
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+27), 0)

! 2490:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+19), 0)
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+20), 0)
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+21), 0)

! 2500:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(3, 0,0.0001, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 2510:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+62), 0)
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+63), 0)
      CALL E_VARRLC1_CFG(1 ,SS ,  (IBRCH+64), 0)

! 2520:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      CALL COMPONENT_ID(ICALL_NO,1907204918)
      RVD1_1 = ONE_3RD*Sbase
      RVD1_2 = MV_Vbase
      RVD1_3 = INV_Vbase*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 1),1,RVD1_1,System_Freq,0.025,0.0001,RVD1&
     &_2,RVD1_3,2.0)
      CALL E_TF2W_CFG((IXFMR + 2),1,RVD1_1,System_Freq,0.025,0.0001,RVD1&
     &_2,RVD1_3,2.0)
      CALL E_TF2W_CFG((IXFMR + 3),1,RVD1_1,System_Freq,0.025,0.0001,RVD1&
     &_2,RVD1_3,2.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(Sbase*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH+46),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+47),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+48),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+49),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+50),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+51),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT2_CFG(2, (IBRCH+52), (IBRCH+53), (IBRCH+54), (IBRCH+55), &
     &(IBRCH+56), (IBRCH+57),0,0,0,0,0,0,SS,RVD1_1,0.2,1.17,System_Freq,&
     &0.0,2.0,0.0,0.025,0.0,0.0,0.0,0.0,0.0,RVD1_2,RVD1_3,0.0,0.0)

! 2530:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(3, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 2540:[LLTX_SCALER_15_2_1]  

! 2550:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(3, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 2560:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(3, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.0001, 1000000.0, 12.0, 12.0, 0.0012, 0.0&
     &)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.0025, 1000000.0, 17.0, 17.0, 0.0019, 0.0&
     &)

      RETURN
      END

!=======================================================================

      SUBROUTINE SimpleSF_15_2_1Out_Begin(Scale, System_Freq, Sbase,    &
     &   MV_Vbase, INV_Vbase, Vdc_Base, Lpu, PQflag, wtype, DVS_dbd,    &
     &   DVS_gain, T_frz)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Control_12_2_1_1_1_1Out_Begin  ! 
!     SUBR    PI_AntiWindUp_50_2_1Out_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Scale, PQflag
      INTEGER, INTENT(IN)  :: wtype
      REAL,    INTENT(IN)  :: System_Freq, Sbase
      REAL,    INTENT(IN)  :: MV_Vbase, INV_Vbase
      REAL,    INTENT(IN)  :: Vdc_Base, Lpu
      REAL,    INTENT(IN)  :: DVS_dbd, DVS_gain
      REAL,    INTENT(IN)  :: T_frz

! Electrical Node Indices
      INTEGER  NT_3, NT_6(3), NT_18, NT_19, NT_20
      INTEGER  NT_22(3)

! Control Signals
      INTEGER  IT_1, IT_3, IT_5, IT_7, IT_8
      REAL     RT_13, RT_14, RT_16, RT_17, RT_25
      REAL     RT_27, RT_29, RT_43, RT_51, RT_52
      REAL     RT_57, P_Min, Voc, RT_61, RT_62
      REAL     RT_63, RT_64, RT_65, RT_75, RT_76
      REAL     RT_77, RT_78, RT_87

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 49
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 72
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_3  = NODE(INODE + 5)
      NT_18 = NODE(INODE + 36)
      NT_19 = NODE(INODE + 37)
      NT_20 = NODE(INODE + 38)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_6(IT_0) = NODE(INODE + 5 + IT_0)
         NT_22(IT_0) = NODE(INODE + 41 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 140:[const] Real Constant 
      RT_65 = 1.0

! 160:[const] Real Constant 
      RT_64 = 1.0

! 180:[const] Real Constant 
      RT_63 = 1.0

! 210:[const] Real Constant 
      RT_62 = 1.0

! 230:[const] Real Constant 
      RT_61 = 1.0

! 290:[const] Real Constant 
      RT_76 = 1.0

! 320:[const] Real Constant 
      RT_77 = 1.0

! 350:[const] Real Constant 
      RT_78 = 1.0

! 640:[const] Real Constant 
      RT_87 = 1.0

! 700:[emtconst] Commonly Used Constants (pi...) 
      RT_52 = BY180_PI

! 730:[const] Real Constant 
      RT_51 = 0.0

! 740:[consti] Integer Constant 
      IT_1 = 0

! 750:[const] Real Constant 
      RT_57 = 5000.0

! 780:[emtconst] Commonly Used Constants (pi...) 
      RT_17 = SQRT_2

! 790:[const] Real Constant 'mf'
      RT_43 = 70.0

! 810:[emtconst] Commonly Used Constants (pi...) 
      RT_13 = SQRT_3

! 820:[pgb] Output Channel 'V_dc'

! 830:[const] Real Constant 
      P_Min = 0.0

! 880:[emtconst] Commonly Used Constants (pi...) 
      RT_14 = SQRT_2

! 890:[emtconst] Commonly Used Constants (pi...) 
      RT_16 = SQRT_1BY3

! 950:[const] Real Constant 'kV'
      Voc = 1.015

! 960:[mult] Multiplier 

! 970:[consti] Integer Constant 
      IT_5 = 0

! 980:[consti] Integer Constant 
      IT_3 = 0

! 990:[emtconst] Commonly Used Constants (pi...) 
      RT_29 = TWO_PI

! 1010:[mult] Multiplier 

! 1020:[realpole] Real Pole 

! 1030:[pgb] Output Channel 'P_dc'

! 1040:[pgb] Output Channel 'P_PV'

! 1070:[const] Real Constant 
      RT_75 = 1000000.0

! 1080:[pgb] Output Channel 'I_dc'

! 1090:[const] Real Constant 
      RT_27 = 1000000.0

! 1100:[emtconst] Commonly Used Constants (pi...) 
      RT_25 = TWO_PI

! 1120:[pgb] Output Channel 'V_dc'

! 1140:[pgb] Output Channel 'Ipv'

! 1150:[pgb] Output Channel 'Vpv'

! 1170:[consti] Integer Constant 
      IT_7 = 0

! 1180:[consti] Integer Constant 
      IT_8 = 0

! 1190:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(Sbase) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(Sbase)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(INV_Vbase) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(INV_Vbase)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = System_Freq

! 1280:[range] Range Comparator 

! 1290:[unity] Type/Shape conversion block 

! 1300:[delay] Binary ON Delay with Interpolation 

! 1600:[Control_12_2_1_1_1_1]  'Control_12_2_1_1'
      CALL Control_12_2_1_1_1_1Out_Begin(DVS_dbd, DVS_gain, T_frz)


! 1800:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out_Begin()


! 1830:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out_Begin()


! 1930:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out_Begin()


! 2000:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out_Begin()


! 2070:[PI_AntiWindUp_50_2_1]  
      CALL PI_AntiWindUp_50_2_1Out_Begin()


! 2190:[pgb] Output Channel 'Igrid'

! 2210:[pgb] Output Channel 'Vgrid'

! 2340:[pgb] Output Channel 'Q'

! 2350:[pgb] Output Channel 'P'

! 2410:[photovoltaic_source] photovoltaic source 'PVarray1'
      RTCF(NRTCF) = 1.0/REAL(35*130)
      NRTCF = NRTCF + 1

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

      RETURN
      END

